// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_api_2eproto;
namespace StreamDeckAPI {
class DeviceBrightnessResponse;
struct DeviceBrightnessResponseDefaultTypeInternal;
extern DeviceBrightnessResponseDefaultTypeInternal _DeviceBrightnessResponse_default_instance_;
class DeviceButtonComponentResponse;
struct DeviceButtonComponentResponseDefaultTypeInternal;
extern DeviceButtonComponentResponseDefaultTypeInternal _DeviceButtonComponentResponse_default_instance_;
class DeviceButtonImageResponse;
struct DeviceButtonImageResponseDefaultTypeInternal;
extern DeviceButtonImageResponseDefaultTypeInternal _DeviceButtonImageResponse_default_instance_;
class DeviceButtonLabelResponse;
struct DeviceButtonLabelResponseDefaultTypeInternal;
extern DeviceButtonLabelResponseDefaultTypeInternal _DeviceButtonLabelResponse_default_instance_;
class DeviceButtonRequest;
struct DeviceButtonRequestDefaultTypeInternal;
extern DeviceButtonRequestDefaultTypeInternal _DeviceButtonRequest_default_instance_;
class DeviceCurrentPageResponse;
struct DeviceCurrentPageResponseDefaultTypeInternal;
extern DeviceCurrentPageResponseDefaultTypeInternal _DeviceCurrentPageResponse_default_instance_;
class DeviceCurrentProfileResponse;
struct DeviceCurrentProfileResponseDefaultTypeInternal;
extern DeviceCurrentProfileResponseDefaultTypeInternal _DeviceCurrentProfileResponse_default_instance_;
class DeviceListResponse;
struct DeviceListResponseDefaultTypeInternal;
extern DeviceListResponseDefaultTypeInternal _DeviceListResponse_default_instance_;
class DevicePageListResponse;
struct DevicePageListResponseDefaultTypeInternal;
extern DevicePageListResponseDefaultTypeInternal _DevicePageListResponse_default_instance_;
class DeviceProfileListResponse;
struct DeviceProfileListResponseDefaultTypeInternal;
extern DeviceProfileListResponseDefaultTypeInternal _DeviceProfileListResponse_default_instance_;
class DeviceRequest;
struct DeviceRequestDefaultTypeInternal;
extern DeviceRequestDefaultTypeInternal _DeviceRequest_default_instance_;
class DeviceSetBrightnessRequest;
struct DeviceSetBrightnessRequestDefaultTypeInternal;
extern DeviceSetBrightnessRequestDefaultTypeInternal _DeviceSetBrightnessRequest_default_instance_;
class DeviceSetButtonImageRequest;
struct DeviceSetButtonImageRequestDefaultTypeInternal;
extern DeviceSetButtonImageRequestDefaultTypeInternal _DeviceSetButtonImageRequest_default_instance_;
class DeviceSetButtonLabelRequest;
struct DeviceSetButtonLabelRequestDefaultTypeInternal;
extern DeviceSetButtonLabelRequestDefaultTypeInternal _DeviceSetButtonLabelRequest_default_instance_;
class DeviceSetButtonModuleComponentRequest;
struct DeviceSetButtonModuleComponentRequestDefaultTypeInternal;
extern DeviceSetButtonModuleComponentRequestDefaultTypeInternal _DeviceSetButtonModuleComponentRequest_default_instance_;
class DeviceSetPageRequest;
struct DeviceSetPageRequestDefaultTypeInternal;
extern DeviceSetPageRequestDefaultTypeInternal _DeviceSetPageRequest_default_instance_;
class DeviceSetProfileRequest;
struct DeviceSetProfileRequestDefaultTypeInternal;
extern DeviceSetProfileRequestDefaultTypeInternal _DeviceSetProfileRequest_default_instance_;
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class ModuleListResponse;
struct ModuleListResponseDefaultTypeInternal;
extern ModuleListResponseDefaultTypeInternal _ModuleListResponse_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_Error;
struct Response_ErrorDefaultTypeInternal;
extern Response_ErrorDefaultTypeInternal _Response_Error_default_instance_;
}  // namespace StreamDeckAPI
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace StreamDeckAPI {

// ===================================================================


// -------------------------------------------------------------------

class Response_Error final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.Response.Error) */ {
 public:
  inline Response_Error() : Response_Error(nullptr) {}
  ~Response_Error() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response_Error(::google::protobuf::internal::ConstantInitialized);

  inline Response_Error(const Response_Error& from)
      : Response_Error(nullptr, from) {}
  Response_Error(Response_Error&& from) noexcept
    : Response_Error() {
    *this = ::std::move(from);
  }

  inline Response_Error& operator=(const Response_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_Error& operator=(Response_Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_Error* internal_default_instance() {
    return reinterpret_cast<const Response_Error*>(
               &_Response_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Response_Error& a, Response_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_Error* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response_Error* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response_Error>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response_Error& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Response_Error& from) {
    Response_Error::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Response_Error* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.Response.Error";
  }
  protected:
  explicit Response_Error(::google::protobuf::Arena* arena);
  Response_Error(::google::protobuf::Arena* arena, const Response_Error& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.Response.Error)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class Module final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  ~Module() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Module(::google::protobuf::internal::ConstantInitialized);

  inline Module(const Module& from)
      : Module(nullptr, from) {}
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Module* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Module& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Module& from) {
    Module::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Module* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.Module";
  }
  protected:
  explicit Module(::google::protobuf::Arena* arena);
  Module(::google::protobuf::Arena* arena, const Module& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string components = 2;
  int components_size() const;
  private:
  int _internal_components_size() const;

  public:
  void clear_components() ;
  const std::string& components(int index) const;
  std::string* mutable_components(int index);
  void set_components(int index, const std::string& value);
  void set_components(int index, std::string&& value);
  void set_components(int index, const char* value);
  void set_components(int index, const char* value, std::size_t size);
  void set_components(int index, absl::string_view value);
  std::string* add_components();
  void add_components(const std::string& value);
  void add_components(std::string&& value);
  void add_components(const char* value);
  void add_components(const char* value, std::size_t size);
  void add_components(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& components() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_components();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_components() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_components();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.Module)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> components_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceSetProfileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceSetProfileRequest) */ {
 public:
  inline DeviceSetProfileRequest() : DeviceSetProfileRequest(nullptr) {}
  ~DeviceSetProfileRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceSetProfileRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceSetProfileRequest(const DeviceSetProfileRequest& from)
      : DeviceSetProfileRequest(nullptr, from) {}
  DeviceSetProfileRequest(DeviceSetProfileRequest&& from) noexcept
    : DeviceSetProfileRequest() {
    *this = ::std::move(from);
  }

  inline DeviceSetProfileRequest& operator=(const DeviceSetProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSetProfileRequest& operator=(DeviceSetProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSetProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSetProfileRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceSetProfileRequest*>(
               &_DeviceSetProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeviceSetProfileRequest& a, DeviceSetProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSetProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSetProfileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSetProfileRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceSetProfileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceSetProfileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceSetProfileRequest& from) {
    DeviceSetProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceSetProfileRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceSetProfileRequest";
  }
  protected:
  explicit DeviceSetProfileRequest(::google::protobuf::Arena* arena);
  DeviceSetProfileRequest(::google::protobuf::Arena* arena, const DeviceSetProfileRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kProfileFieldNumber = 2,
  };
  // string device = 1;
  void clear_device() ;
  const std::string& device() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device(Arg_&& arg, Args_... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* value);

  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(
      const std::string& value);
  std::string* _internal_mutable_device();

  public:
  // string profile = 2;
  void clear_profile() ;
  const std::string& profile() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_profile(Arg_&& arg, Args_... args);
  std::string* mutable_profile();
  PROTOBUF_NODISCARD std::string* release_profile();
  void set_allocated_profile(std::string* value);

  private:
  const std::string& _internal_profile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile(
      const std::string& value);
  std::string* _internal_mutable_profile();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceSetProfileRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::google::protobuf::internal::ArenaStringPtr profile_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceSetPageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceSetPageRequest) */ {
 public:
  inline DeviceSetPageRequest() : DeviceSetPageRequest(nullptr) {}
  ~DeviceSetPageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceSetPageRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceSetPageRequest(const DeviceSetPageRequest& from)
      : DeviceSetPageRequest(nullptr, from) {}
  DeviceSetPageRequest(DeviceSetPageRequest&& from) noexcept
    : DeviceSetPageRequest() {
    *this = ::std::move(from);
  }

  inline DeviceSetPageRequest& operator=(const DeviceSetPageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSetPageRequest& operator=(DeviceSetPageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSetPageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSetPageRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceSetPageRequest*>(
               &_DeviceSetPageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeviceSetPageRequest& a, DeviceSetPageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSetPageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSetPageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSetPageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceSetPageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceSetPageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceSetPageRequest& from) {
    DeviceSetPageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceSetPageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceSetPageRequest";
  }
  protected:
  explicit DeviceSetPageRequest(::google::protobuf::Arena* arena);
  DeviceSetPageRequest(::google::protobuf::Arena* arena, const DeviceSetPageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // string device = 1;
  void clear_device() ;
  const std::string& device() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device(Arg_&& arg, Args_... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* value);

  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(
      const std::string& value);
  std::string* _internal_mutable_device();

  public:
  // string page = 2;
  void clear_page() ;
  const std::string& page() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_page(Arg_&& arg, Args_... args);
  std::string* mutable_page();
  PROTOBUF_NODISCARD std::string* release_page();
  void set_allocated_page(std::string* value);

  private:
  const std::string& _internal_page() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page(
      const std::string& value);
  std::string* _internal_mutable_page();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceSetPageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::google::protobuf::internal::ArenaStringPtr page_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceSetButtonModuleComponentRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceSetButtonModuleComponentRequest) */ {
 public:
  inline DeviceSetButtonModuleComponentRequest() : DeviceSetButtonModuleComponentRequest(nullptr) {}
  ~DeviceSetButtonModuleComponentRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceSetButtonModuleComponentRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceSetButtonModuleComponentRequest(const DeviceSetButtonModuleComponentRequest& from)
      : DeviceSetButtonModuleComponentRequest(nullptr, from) {}
  DeviceSetButtonModuleComponentRequest(DeviceSetButtonModuleComponentRequest&& from) noexcept
    : DeviceSetButtonModuleComponentRequest() {
    *this = ::std::move(from);
  }

  inline DeviceSetButtonModuleComponentRequest& operator=(const DeviceSetButtonModuleComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSetButtonModuleComponentRequest& operator=(DeviceSetButtonModuleComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSetButtonModuleComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSetButtonModuleComponentRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceSetButtonModuleComponentRequest*>(
               &_DeviceSetButtonModuleComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeviceSetButtonModuleComponentRequest& a, DeviceSetButtonModuleComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSetButtonModuleComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSetButtonModuleComponentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSetButtonModuleComponentRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceSetButtonModuleComponentRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceSetButtonModuleComponentRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceSetButtonModuleComponentRequest& from) {
    DeviceSetButtonModuleComponentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceSetButtonModuleComponentRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceSetButtonModuleComponentRequest";
  }
  protected:
  explicit DeviceSetButtonModuleComponentRequest(::google::protobuf::Arena* arena);
  DeviceSetButtonModuleComponentRequest(::google::protobuf::Arena* arena, const DeviceSetButtonModuleComponentRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kModuleFieldNumber = 3,
    kComponentFieldNumber = 4,
    kButtonFieldNumber = 2,
  };
  // string device = 1;
  void clear_device() ;
  const std::string& device() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device(Arg_&& arg, Args_... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* value);

  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(
      const std::string& value);
  std::string* _internal_mutable_device();

  public:
  // string module = 3;
  void clear_module() ;
  const std::string& module() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_module(Arg_&& arg, Args_... args);
  std::string* mutable_module();
  PROTOBUF_NODISCARD std::string* release_module();
  void set_allocated_module(std::string* value);

  private:
  const std::string& _internal_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module(
      const std::string& value);
  std::string* _internal_mutable_module();

  public:
  // string component = 4;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // int32 button = 2;
  void clear_button() ;
  ::int32_t button() const;
  void set_button(::int32_t value);

  private:
  ::int32_t _internal_button() const;
  void _internal_set_button(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceSetButtonModuleComponentRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      81, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::google::protobuf::internal::ArenaStringPtr module_;
    ::google::protobuf::internal::ArenaStringPtr component_;
    ::int32_t button_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceSetButtonLabelRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceSetButtonLabelRequest) */ {
 public:
  inline DeviceSetButtonLabelRequest() : DeviceSetButtonLabelRequest(nullptr) {}
  ~DeviceSetButtonLabelRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceSetButtonLabelRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceSetButtonLabelRequest(const DeviceSetButtonLabelRequest& from)
      : DeviceSetButtonLabelRequest(nullptr, from) {}
  DeviceSetButtonLabelRequest(DeviceSetButtonLabelRequest&& from) noexcept
    : DeviceSetButtonLabelRequest() {
    *this = ::std::move(from);
  }

  inline DeviceSetButtonLabelRequest& operator=(const DeviceSetButtonLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSetButtonLabelRequest& operator=(DeviceSetButtonLabelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSetButtonLabelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSetButtonLabelRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceSetButtonLabelRequest*>(
               &_DeviceSetButtonLabelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeviceSetButtonLabelRequest& a, DeviceSetButtonLabelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSetButtonLabelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSetButtonLabelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSetButtonLabelRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceSetButtonLabelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceSetButtonLabelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceSetButtonLabelRequest& from) {
    DeviceSetButtonLabelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceSetButtonLabelRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceSetButtonLabelRequest";
  }
  protected:
  explicit DeviceSetButtonLabelRequest(::google::protobuf::Arena* arena);
  DeviceSetButtonLabelRequest(::google::protobuf::Arena* arena, const DeviceSetButtonLabelRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kLabelFieldNumber = 3,
    kButtonFieldNumber = 2,
  };
  // string device = 1;
  void clear_device() ;
  const std::string& device() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device(Arg_&& arg, Args_... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* value);

  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(
      const std::string& value);
  std::string* _internal_mutable_device();

  public:
  // string label = 3;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // int32 button = 2;
  void clear_button() ;
  ::int32_t button() const;
  void set_button(::int32_t value);

  private:
  ::int32_t _internal_button() const;
  void _internal_set_button(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceSetButtonLabelRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::int32_t button_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceSetButtonImageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceSetButtonImageRequest) */ {
 public:
  inline DeviceSetButtonImageRequest() : DeviceSetButtonImageRequest(nullptr) {}
  ~DeviceSetButtonImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceSetButtonImageRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceSetButtonImageRequest(const DeviceSetButtonImageRequest& from)
      : DeviceSetButtonImageRequest(nullptr, from) {}
  DeviceSetButtonImageRequest(DeviceSetButtonImageRequest&& from) noexcept
    : DeviceSetButtonImageRequest() {
    *this = ::std::move(from);
  }

  inline DeviceSetButtonImageRequest& operator=(const DeviceSetButtonImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSetButtonImageRequest& operator=(DeviceSetButtonImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSetButtonImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSetButtonImageRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceSetButtonImageRequest*>(
               &_DeviceSetButtonImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeviceSetButtonImageRequest& a, DeviceSetButtonImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSetButtonImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSetButtonImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSetButtonImageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceSetButtonImageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceSetButtonImageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceSetButtonImageRequest& from) {
    DeviceSetButtonImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceSetButtonImageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceSetButtonImageRequest";
  }
  protected:
  explicit DeviceSetButtonImageRequest(::google::protobuf::Arena* arena);
  DeviceSetButtonImageRequest(::google::protobuf::Arena* arena, const DeviceSetButtonImageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kImageFieldNumber = 3,
    kButtonFieldNumber = 2,
  };
  // string device = 1;
  void clear_device() ;
  const std::string& device() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device(Arg_&& arg, Args_... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* value);

  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(
      const std::string& value);
  std::string* _internal_mutable_device();

  public:
  // bytes image = 3;
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // int32 button = 2;
  void clear_button() ;
  ::int32_t button() const;
  void set_button(::int32_t value);

  private:
  ::int32_t _internal_button() const;
  void _internal_set_button(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceSetButtonImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::google::protobuf::internal::ArenaStringPtr image_;
    ::int32_t button_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceSetBrightnessRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceSetBrightnessRequest) */ {
 public:
  inline DeviceSetBrightnessRequest() : DeviceSetBrightnessRequest(nullptr) {}
  ~DeviceSetBrightnessRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceSetBrightnessRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceSetBrightnessRequest(const DeviceSetBrightnessRequest& from)
      : DeviceSetBrightnessRequest(nullptr, from) {}
  DeviceSetBrightnessRequest(DeviceSetBrightnessRequest&& from) noexcept
    : DeviceSetBrightnessRequest() {
    *this = ::std::move(from);
  }

  inline DeviceSetBrightnessRequest& operator=(const DeviceSetBrightnessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSetBrightnessRequest& operator=(DeviceSetBrightnessRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSetBrightnessRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSetBrightnessRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceSetBrightnessRequest*>(
               &_DeviceSetBrightnessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeviceSetBrightnessRequest& a, DeviceSetBrightnessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSetBrightnessRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSetBrightnessRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSetBrightnessRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceSetBrightnessRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceSetBrightnessRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceSetBrightnessRequest& from) {
    DeviceSetBrightnessRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceSetBrightnessRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceSetBrightnessRequest";
  }
  protected:
  explicit DeviceSetBrightnessRequest(::google::protobuf::Arena* arena);
  DeviceSetBrightnessRequest(::google::protobuf::Arena* arena, const DeviceSetBrightnessRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kBrightnessFieldNumber = 2,
  };
  // string device = 1;
  void clear_device() ;
  const std::string& device() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device(Arg_&& arg, Args_... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* value);

  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(
      const std::string& value);
  std::string* _internal_mutable_device();

  public:
  // int32 brightness = 2;
  void clear_brightness() ;
  ::int32_t brightness() const;
  void set_brightness(::int32_t value);

  private:
  ::int32_t _internal_brightness() const;
  void _internal_set_brightness(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceSetBrightnessRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_;
    ::int32_t brightness_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceRequest) */ {
 public:
  inline DeviceRequest() : DeviceRequest(nullptr) {}
  ~DeviceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceRequest(const DeviceRequest& from)
      : DeviceRequest(nullptr, from) {}
  DeviceRequest(DeviceRequest&& from) noexcept
    : DeviceRequest() {
    *this = ::std::move(from);
  }

  inline DeviceRequest& operator=(const DeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRequest& operator=(DeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceRequest*>(
               &_DeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceRequest& a, DeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceRequest& from) {
    DeviceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceRequest";
  }
  protected:
  explicit DeviceRequest(::google::protobuf::Arena* arena);
  DeviceRequest(::google::protobuf::Arena* arena, const DeviceRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string device_name = 1;
  void clear_device_name() ;
  const std::string& device_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* value);

  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(
      const std::string& value);
  std::string* _internal_mutable_device_name();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceButtonRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceButtonRequest) */ {
 public:
  inline DeviceButtonRequest() : DeviceButtonRequest(nullptr) {}
  ~DeviceButtonRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceButtonRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceButtonRequest(const DeviceButtonRequest& from)
      : DeviceButtonRequest(nullptr, from) {}
  DeviceButtonRequest(DeviceButtonRequest&& from) noexcept
    : DeviceButtonRequest() {
    *this = ::std::move(from);
  }

  inline DeviceButtonRequest& operator=(const DeviceButtonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceButtonRequest& operator=(DeviceButtonRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceButtonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceButtonRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceButtonRequest*>(
               &_DeviceButtonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeviceButtonRequest& a, DeviceButtonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceButtonRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceButtonRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceButtonRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceButtonRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceButtonRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceButtonRequest& from) {
    DeviceButtonRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceButtonRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceButtonRequest";
  }
  protected:
  explicit DeviceButtonRequest(::google::protobuf::Arena* arena);
  DeviceButtonRequest(::google::protobuf::Arena* arena, const DeviceButtonRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kButtonFieldNumber = 2,
  };
  // string device_name = 1;
  void clear_device_name() ;
  const std::string& device_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* value);

  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(
      const std::string& value);
  std::string* _internal_mutable_device_name();

  public:
  // int32 button = 2;
  void clear_button() ;
  ::int32_t button() const;
  void set_button(::int32_t value);

  private:
  ::int32_t _internal_button() const;
  void _internal_set_button(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceButtonRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_name_;
    ::int32_t button_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response(::google::protobuf::internal::ConstantInitialized);

  inline Response(const Response& from)
      : Response(nullptr, from) {}
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Response* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.Response";
  }
  protected:
  explicit Response(::google::protobuf::Arena* arena);
  Response(::google::protobuf::Arena* arena, const Response& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Error = Response_Error;

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // .StreamDeckAPI.Response.Error error = 2;
  bool has_error() const;
  void clear_error() ;
  const ::StreamDeckAPI::Response_Error& error() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response_Error* release_error();
  ::StreamDeckAPI::Response_Error* mutable_error();
  void set_allocated_error(::StreamDeckAPI::Response_Error* value);
  void unsafe_arena_set_allocated_error(::StreamDeckAPI::Response_Error* value);
  ::StreamDeckAPI::Response_Error* unsafe_arena_release_error();

  private:
  const ::StreamDeckAPI::Response_Error& _internal_error() const;
  ::StreamDeckAPI::Response_Error* _internal_mutable_error();

  public:
  // int32 code = 1;
  void clear_code() ;
  ::int32_t code() const;
  void set_code(::int32_t value);

  private:
  ::int32_t _internal_code() const;
  void _internal_set_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.Response)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::StreamDeckAPI::Response_Error* error_;
    ::int32_t code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class ModuleListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.ModuleListResponse) */ {
 public:
  inline ModuleListResponse() : ModuleListResponse(nullptr) {}
  ~ModuleListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleListResponse(::google::protobuf::internal::ConstantInitialized);

  inline ModuleListResponse(const ModuleListResponse& from)
      : ModuleListResponse(nullptr, from) {}
  ModuleListResponse(ModuleListResponse&& from) noexcept
    : ModuleListResponse() {
    *this = ::std::move(from);
  }

  inline ModuleListResponse& operator=(const ModuleListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleListResponse& operator=(ModuleListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleListResponse* internal_default_instance() {
    return reinterpret_cast<const ModuleListResponse*>(
               &_ModuleListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModuleListResponse& a, ModuleListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModuleListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModuleListResponse& from) {
    ModuleListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ModuleListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.ModuleListResponse";
  }
  protected:
  explicit ModuleListResponse(::google::protobuf::Arena* arena);
  ModuleListResponse(::google::protobuf::Arena* arena, const ModuleListResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModulesFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // repeated .StreamDeckAPI.Module modules = 2;
  int modules_size() const;
  private:
  int _internal_modules_size() const;

  public:
  void clear_modules() ;
  ::StreamDeckAPI::Module* mutable_modules(int index);
  ::google::protobuf::RepeatedPtrField< ::StreamDeckAPI::Module >*
      mutable_modules();
  private:
  const ::google::protobuf::RepeatedPtrField<::StreamDeckAPI::Module>& _internal_modules() const;
  ::google::protobuf::RepeatedPtrField<::StreamDeckAPI::Module>* _internal_mutable_modules();
  public:
  const ::StreamDeckAPI::Module& modules(int index) const;
  ::StreamDeckAPI::Module* add_modules();
  const ::google::protobuf::RepeatedPtrField< ::StreamDeckAPI::Module >&
      modules() const;
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.ModuleListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::StreamDeckAPI::Module > modules_;
    ::StreamDeckAPI::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceProfileListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceProfileListResponse) */ {
 public:
  inline DeviceProfileListResponse() : DeviceProfileListResponse(nullptr) {}
  ~DeviceProfileListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceProfileListResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceProfileListResponse(const DeviceProfileListResponse& from)
      : DeviceProfileListResponse(nullptr, from) {}
  DeviceProfileListResponse(DeviceProfileListResponse&& from) noexcept
    : DeviceProfileListResponse() {
    *this = ::std::move(from);
  }

  inline DeviceProfileListResponse& operator=(const DeviceProfileListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceProfileListResponse& operator=(DeviceProfileListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceProfileListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceProfileListResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceProfileListResponse*>(
               &_DeviceProfileListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceProfileListResponse& a, DeviceProfileListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceProfileListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceProfileListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceProfileListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceProfileListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceProfileListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceProfileListResponse& from) {
    DeviceProfileListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceProfileListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceProfileListResponse";
  }
  protected:
  explicit DeviceProfileListResponse(::google::protobuf::Arena* arena);
  DeviceProfileListResponse(::google::protobuf::Arena* arena, const DeviceProfileListResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfilesFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // repeated string profiles = 2;
  int profiles_size() const;
  private:
  int _internal_profiles_size() const;

  public:
  void clear_profiles() ;
  const std::string& profiles(int index) const;
  std::string* mutable_profiles(int index);
  void set_profiles(int index, const std::string& value);
  void set_profiles(int index, std::string&& value);
  void set_profiles(int index, const char* value);
  void set_profiles(int index, const char* value, std::size_t size);
  void set_profiles(int index, absl::string_view value);
  std::string* add_profiles();
  void add_profiles(const std::string& value);
  void add_profiles(std::string&& value);
  void add_profiles(const char* value);
  void add_profiles(const char* value, std::size_t size);
  void add_profiles(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& profiles() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_profiles();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_profiles() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_profiles();

  public:
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceProfileListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> profiles_;
    ::StreamDeckAPI::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DevicePageListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DevicePageListResponse) */ {
 public:
  inline DevicePageListResponse() : DevicePageListResponse(nullptr) {}
  ~DevicePageListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DevicePageListResponse(::google::protobuf::internal::ConstantInitialized);

  inline DevicePageListResponse(const DevicePageListResponse& from)
      : DevicePageListResponse(nullptr, from) {}
  DevicePageListResponse(DevicePageListResponse&& from) noexcept
    : DevicePageListResponse() {
    *this = ::std::move(from);
  }

  inline DevicePageListResponse& operator=(const DevicePageListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevicePageListResponse& operator=(DevicePageListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DevicePageListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DevicePageListResponse* internal_default_instance() {
    return reinterpret_cast<const DevicePageListResponse*>(
               &_DevicePageListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DevicePageListResponse& a, DevicePageListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DevicePageListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevicePageListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DevicePageListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DevicePageListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DevicePageListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DevicePageListResponse& from) {
    DevicePageListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DevicePageListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DevicePageListResponse";
  }
  protected:
  explicit DevicePageListResponse(::google::protobuf::Arena* arena);
  DevicePageListResponse(::google::protobuf::Arena* arena, const DevicePageListResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // repeated string pages = 2;
  int pages_size() const;
  private:
  int _internal_pages_size() const;

  public:
  void clear_pages() ;
  const std::string& pages(int index) const;
  std::string* mutable_pages(int index);
  void set_pages(int index, const std::string& value);
  void set_pages(int index, std::string&& value);
  void set_pages(int index, const char* value);
  void set_pages(int index, const char* value, std::size_t size);
  void set_pages(int index, absl::string_view value);
  std::string* add_pages();
  void add_pages(const std::string& value);
  void add_pages(std::string&& value);
  void add_pages(const char* value);
  void add_pages(const char* value, std::size_t size);
  void add_pages(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& pages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_pages();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_pages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_pages();

  public:
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DevicePageListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> pages_;
    ::StreamDeckAPI::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceListResponse) */ {
 public:
  inline DeviceListResponse() : DeviceListResponse(nullptr) {}
  ~DeviceListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceListResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceListResponse(const DeviceListResponse& from)
      : DeviceListResponse(nullptr, from) {}
  DeviceListResponse(DeviceListResponse&& from) noexcept
    : DeviceListResponse() {
    *this = ::std::move(from);
  }

  inline DeviceListResponse& operator=(const DeviceListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceListResponse& operator=(DeviceListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceListResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceListResponse*>(
               &_DeviceListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceListResponse& a, DeviceListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceListResponse& from) {
    DeviceListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceListResponse";
  }
  protected:
  explicit DeviceListResponse(::google::protobuf::Arena* arena);
  DeviceListResponse(::google::protobuf::Arena* arena, const DeviceListResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // repeated string devices = 2;
  int devices_size() const;
  private:
  int _internal_devices_size() const;

  public:
  void clear_devices() ;
  const std::string& devices(int index) const;
  std::string* mutable_devices(int index);
  void set_devices(int index, const std::string& value);
  void set_devices(int index, std::string&& value);
  void set_devices(int index, const char* value);
  void set_devices(int index, const char* value, std::size_t size);
  void set_devices(int index, absl::string_view value);
  std::string* add_devices();
  void add_devices(const std::string& value);
  void add_devices(std::string&& value);
  void add_devices(const char* value);
  void add_devices(const char* value, std::size_t size);
  void add_devices(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& devices() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_devices();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_devices() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_devices();

  public:
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> devices_;
    ::StreamDeckAPI::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceCurrentProfileResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceCurrentProfileResponse) */ {
 public:
  inline DeviceCurrentProfileResponse() : DeviceCurrentProfileResponse(nullptr) {}
  ~DeviceCurrentProfileResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceCurrentProfileResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceCurrentProfileResponse(const DeviceCurrentProfileResponse& from)
      : DeviceCurrentProfileResponse(nullptr, from) {}
  DeviceCurrentProfileResponse(DeviceCurrentProfileResponse&& from) noexcept
    : DeviceCurrentProfileResponse() {
    *this = ::std::move(from);
  }

  inline DeviceCurrentProfileResponse& operator=(const DeviceCurrentProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCurrentProfileResponse& operator=(DeviceCurrentProfileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceCurrentProfileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceCurrentProfileResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceCurrentProfileResponse*>(
               &_DeviceCurrentProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceCurrentProfileResponse& a, DeviceCurrentProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceCurrentProfileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceCurrentProfileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceCurrentProfileResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceCurrentProfileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceCurrentProfileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceCurrentProfileResponse& from) {
    DeviceCurrentProfileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceCurrentProfileResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceCurrentProfileResponse";
  }
  protected:
  explicit DeviceCurrentProfileResponse(::google::protobuf::Arena* arena);
  DeviceCurrentProfileResponse(::google::protobuf::Arena* arena, const DeviceCurrentProfileResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // string profile = 2;
  void clear_profile() ;
  const std::string& profile() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_profile(Arg_&& arg, Args_... args);
  std::string* mutable_profile();
  PROTOBUF_NODISCARD std::string* release_profile();
  void set_allocated_profile(std::string* value);

  private:
  const std::string& _internal_profile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile(
      const std::string& value);
  std::string* _internal_mutable_profile();

  public:
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceCurrentProfileResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr profile_;
    ::StreamDeckAPI::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceCurrentPageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceCurrentPageResponse) */ {
 public:
  inline DeviceCurrentPageResponse() : DeviceCurrentPageResponse(nullptr) {}
  ~DeviceCurrentPageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceCurrentPageResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceCurrentPageResponse(const DeviceCurrentPageResponse& from)
      : DeviceCurrentPageResponse(nullptr, from) {}
  DeviceCurrentPageResponse(DeviceCurrentPageResponse&& from) noexcept
    : DeviceCurrentPageResponse() {
    *this = ::std::move(from);
  }

  inline DeviceCurrentPageResponse& operator=(const DeviceCurrentPageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCurrentPageResponse& operator=(DeviceCurrentPageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceCurrentPageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceCurrentPageResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceCurrentPageResponse*>(
               &_DeviceCurrentPageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeviceCurrentPageResponse& a, DeviceCurrentPageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceCurrentPageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceCurrentPageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceCurrentPageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceCurrentPageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceCurrentPageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceCurrentPageResponse& from) {
    DeviceCurrentPageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceCurrentPageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceCurrentPageResponse";
  }
  protected:
  explicit DeviceCurrentPageResponse(::google::protobuf::Arena* arena);
  DeviceCurrentPageResponse(::google::protobuf::Arena* arena, const DeviceCurrentPageResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // string page = 2;
  void clear_page() ;
  const std::string& page() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_page(Arg_&& arg, Args_... args);
  std::string* mutable_page();
  PROTOBUF_NODISCARD std::string* release_page();
  void set_allocated_page(std::string* value);

  private:
  const std::string& _internal_page() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page(
      const std::string& value);
  std::string* _internal_mutable_page();

  public:
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceCurrentPageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr page_;
    ::StreamDeckAPI::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceButtonLabelResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceButtonLabelResponse) */ {
 public:
  inline DeviceButtonLabelResponse() : DeviceButtonLabelResponse(nullptr) {}
  ~DeviceButtonLabelResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceButtonLabelResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceButtonLabelResponse(const DeviceButtonLabelResponse& from)
      : DeviceButtonLabelResponse(nullptr, from) {}
  DeviceButtonLabelResponse(DeviceButtonLabelResponse&& from) noexcept
    : DeviceButtonLabelResponse() {
    *this = ::std::move(from);
  }

  inline DeviceButtonLabelResponse& operator=(const DeviceButtonLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceButtonLabelResponse& operator=(DeviceButtonLabelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceButtonLabelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceButtonLabelResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceButtonLabelResponse*>(
               &_DeviceButtonLabelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeviceButtonLabelResponse& a, DeviceButtonLabelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceButtonLabelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceButtonLabelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceButtonLabelResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceButtonLabelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceButtonLabelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceButtonLabelResponse& from) {
    DeviceButtonLabelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceButtonLabelResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceButtonLabelResponse";
  }
  protected:
  explicit DeviceButtonLabelResponse(::google::protobuf::Arena* arena);
  DeviceButtonLabelResponse(::google::protobuf::Arena* arena, const DeviceButtonLabelResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceButtonLabelResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::StreamDeckAPI::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceButtonImageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceButtonImageResponse) */ {
 public:
  inline DeviceButtonImageResponse() : DeviceButtonImageResponse(nullptr) {}
  ~DeviceButtonImageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceButtonImageResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceButtonImageResponse(const DeviceButtonImageResponse& from)
      : DeviceButtonImageResponse(nullptr, from) {}
  DeviceButtonImageResponse(DeviceButtonImageResponse&& from) noexcept
    : DeviceButtonImageResponse() {
    *this = ::std::move(from);
  }

  inline DeviceButtonImageResponse& operator=(const DeviceButtonImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceButtonImageResponse& operator=(DeviceButtonImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceButtonImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceButtonImageResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceButtonImageResponse*>(
               &_DeviceButtonImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeviceButtonImageResponse& a, DeviceButtonImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceButtonImageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceButtonImageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceButtonImageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceButtonImageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceButtonImageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceButtonImageResponse& from) {
    DeviceButtonImageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceButtonImageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceButtonImageResponse";
  }
  protected:
  explicit DeviceButtonImageResponse(::google::protobuf::Arena* arena);
  DeviceButtonImageResponse(::google::protobuf::Arena* arena, const DeviceButtonImageResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceButtonImageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr image_;
    ::StreamDeckAPI::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceButtonComponentResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceButtonComponentResponse) */ {
 public:
  inline DeviceButtonComponentResponse() : DeviceButtonComponentResponse(nullptr) {}
  ~DeviceButtonComponentResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceButtonComponentResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceButtonComponentResponse(const DeviceButtonComponentResponse& from)
      : DeviceButtonComponentResponse(nullptr, from) {}
  DeviceButtonComponentResponse(DeviceButtonComponentResponse&& from) noexcept
    : DeviceButtonComponentResponse() {
    *this = ::std::move(from);
  }

  inline DeviceButtonComponentResponse& operator=(const DeviceButtonComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceButtonComponentResponse& operator=(DeviceButtonComponentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceButtonComponentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceButtonComponentResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceButtonComponentResponse*>(
               &_DeviceButtonComponentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeviceButtonComponentResponse& a, DeviceButtonComponentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceButtonComponentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceButtonComponentResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceButtonComponentResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceButtonComponentResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceButtonComponentResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceButtonComponentResponse& from) {
    DeviceButtonComponentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceButtonComponentResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceButtonComponentResponse";
  }
  protected:
  explicit DeviceButtonComponentResponse(::google::protobuf::Arena* arena);
  DeviceButtonComponentResponse(::google::protobuf::Arena* arena, const DeviceButtonComponentResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 2,
    kComponentFieldNumber = 3,
    kResponseFieldNumber = 1,
  };
  // string module = 2;
  void clear_module() ;
  const std::string& module() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_module(Arg_&& arg, Args_... args);
  std::string* mutable_module();
  PROTOBUF_NODISCARD std::string* release_module();
  void set_allocated_module(std::string* value);

  private:
  const std::string& _internal_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module(
      const std::string& value);
  std::string* _internal_mutable_module();

  public:
  // string component = 3;
  void clear_component() ;
  const std::string& component() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_component(Arg_&& arg, Args_... args);
  std::string* mutable_component();
  PROTOBUF_NODISCARD std::string* release_component();
  void set_allocated_component(std::string* value);

  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(
      const std::string& value);
  std::string* _internal_mutable_component();

  public:
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceButtonComponentResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      67, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr module_;
    ::google::protobuf::internal::ArenaStringPtr component_;
    ::StreamDeckAPI::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};// -------------------------------------------------------------------

class DeviceBrightnessResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamDeckAPI.DeviceBrightnessResponse) */ {
 public:
  inline DeviceBrightnessResponse() : DeviceBrightnessResponse(nullptr) {}
  ~DeviceBrightnessResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceBrightnessResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceBrightnessResponse(const DeviceBrightnessResponse& from)
      : DeviceBrightnessResponse(nullptr, from) {}
  DeviceBrightnessResponse(DeviceBrightnessResponse&& from) noexcept
    : DeviceBrightnessResponse() {
    *this = ::std::move(from);
  }

  inline DeviceBrightnessResponse& operator=(const DeviceBrightnessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceBrightnessResponse& operator=(DeviceBrightnessResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceBrightnessResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceBrightnessResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceBrightnessResponse*>(
               &_DeviceBrightnessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeviceBrightnessResponse& a, DeviceBrightnessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceBrightnessResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceBrightnessResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceBrightnessResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceBrightnessResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceBrightnessResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceBrightnessResponse& from) {
    DeviceBrightnessResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceBrightnessResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StreamDeckAPI.DeviceBrightnessResponse";
  }
  protected:
  explicit DeviceBrightnessResponse(::google::protobuf::Arena* arena);
  DeviceBrightnessResponse(::google::protobuf::Arena* arena, const DeviceBrightnessResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
    kBrightnessFieldNumber = 2,
  };
  // .StreamDeckAPI.Response response = 1;
  bool has_response() const;
  void clear_response() ;
  const ::StreamDeckAPI::Response& response() const;
  PROTOBUF_NODISCARD ::StreamDeckAPI::Response* release_response();
  ::StreamDeckAPI::Response* mutable_response();
  void set_allocated_response(::StreamDeckAPI::Response* value);
  void unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value);
  ::StreamDeckAPI::Response* unsafe_arena_release_response();

  private:
  const ::StreamDeckAPI::Response& _internal_response() const;
  ::StreamDeckAPI::Response* _internal_mutable_response();

  public:
  // int32 brightness = 2;
  void clear_brightness() ;
  ::int32_t brightness() const;
  void set_brightness(::int32_t value);

  private:
  ::int32_t _internal_brightness() const;
  void _internal_set_brightness(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:StreamDeckAPI.DeviceBrightnessResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::StreamDeckAPI::Response* response_;
    ::int32_t brightness_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ModuleListResponse

// .StreamDeckAPI.Response response = 1;
inline bool ModuleListResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void ModuleListResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& ModuleListResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& ModuleListResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.ModuleListResponse.response)
  return _internal_response();
}
inline void ModuleListResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.ModuleListResponse.response)
}
inline ::StreamDeckAPI::Response* ModuleListResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* ModuleListResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.ModuleListResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* ModuleListResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* ModuleListResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.ModuleListResponse.response)
  return _msg;
}
inline void ModuleListResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.ModuleListResponse.response)
}

// repeated .StreamDeckAPI.Module modules = 2;
inline int ModuleListResponse::_internal_modules_size() const {
  return _internal_modules().size();
}
inline int ModuleListResponse::modules_size() const {
  return _internal_modules_size();
}
inline void ModuleListResponse::clear_modules() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.modules_.Clear();
}
inline ::StreamDeckAPI::Module* ModuleListResponse::mutable_modules(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.ModuleListResponse.modules)
  return _internal_mutable_modules()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::StreamDeckAPI::Module>* ModuleListResponse::mutable_modules()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:StreamDeckAPI.ModuleListResponse.modules)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_modules();
}
inline const ::StreamDeckAPI::Module& ModuleListResponse::modules(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.ModuleListResponse.modules)
  return _internal_modules().Get(index);
}
inline ::StreamDeckAPI::Module* ModuleListResponse::add_modules() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::StreamDeckAPI::Module* _add = _internal_mutable_modules()->Add();
  // @@protoc_insertion_point(field_add:StreamDeckAPI.ModuleListResponse.modules)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::StreamDeckAPI::Module>& ModuleListResponse::modules() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:StreamDeckAPI.ModuleListResponse.modules)
  return _internal_modules();
}
inline const ::google::protobuf::RepeatedPtrField<::StreamDeckAPI::Module>&
ModuleListResponse::_internal_modules() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.modules_;
}
inline ::google::protobuf::RepeatedPtrField<::StreamDeckAPI::Module>*
ModuleListResponse::_internal_mutable_modules() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.modules_;
}

// -------------------------------------------------------------------

// DeviceListResponse

// .StreamDeckAPI.Response response = 1;
inline bool DeviceListResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void DeviceListResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& DeviceListResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& DeviceListResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceListResponse.response)
  return _internal_response();
}
inline void DeviceListResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.DeviceListResponse.response)
}
inline ::StreamDeckAPI::Response* DeviceListResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* DeviceListResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceListResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* DeviceListResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* DeviceListResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceListResponse.response)
  return _msg;
}
inline void DeviceListResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceListResponse.response)
}

// repeated string devices = 2;
inline int DeviceListResponse::_internal_devices_size() const {
  return _internal_devices().size();
}
inline int DeviceListResponse::devices_size() const {
  return _internal_devices_size();
}
inline void DeviceListResponse::clear_devices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.devices_.Clear();
}
inline std::string* DeviceListResponse::add_devices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_devices()->Add();
  // @@protoc_insertion_point(field_add_mutable:StreamDeckAPI.DeviceListResponse.devices)
  return _s;
}
inline const std::string& DeviceListResponse::devices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceListResponse.devices)
  return _internal_devices().Get(index);
}
inline std::string* DeviceListResponse::mutable_devices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceListResponse.devices)
  return _internal_mutable_devices()->Mutable(index);
}
inline void DeviceListResponse::set_devices(int index, const std::string& value) {
  _internal_mutable_devices()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceListResponse.devices)
}
inline void DeviceListResponse::set_devices(int index, std::string&& value) {
  _internal_mutable_devices()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceListResponse.devices)
}
inline void DeviceListResponse::set_devices(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_devices()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StreamDeckAPI.DeviceListResponse.devices)
}
inline void DeviceListResponse::set_devices(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_devices()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StreamDeckAPI.DeviceListResponse.devices)
}
inline void DeviceListResponse::set_devices(int index, absl::string_view value) {
  _internal_mutable_devices()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:StreamDeckAPI.DeviceListResponse.devices)
}
inline void DeviceListResponse::add_devices(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_devices()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:StreamDeckAPI.DeviceListResponse.devices)
}
inline void DeviceListResponse::add_devices(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_devices()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:StreamDeckAPI.DeviceListResponse.devices)
}
inline void DeviceListResponse::add_devices(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_devices()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StreamDeckAPI.DeviceListResponse.devices)
}
inline void DeviceListResponse::add_devices(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_devices()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StreamDeckAPI.DeviceListResponse.devices)
}
inline void DeviceListResponse::add_devices(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_devices()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:StreamDeckAPI.DeviceListResponse.devices)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceListResponse::devices() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:StreamDeckAPI.DeviceListResponse.devices)
  return _internal_devices();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceListResponse::mutable_devices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:StreamDeckAPI.DeviceListResponse.devices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_devices();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceListResponse::_internal_devices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.devices_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceListResponse::_internal_mutable_devices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.devices_;
}

// -------------------------------------------------------------------

// DeviceRequest

// string device_name = 1;
inline void DeviceRequest::clear_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& DeviceRequest::device_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceRequest.device_name)
  return _internal_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceRequest::set_device_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceRequest.device_name)
}
inline std::string* DeviceRequest::mutable_device_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceRequest.device_name)
  return _s;
}
inline const std::string& DeviceRequest::_internal_device_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_name_.Get();
}
inline void DeviceRequest::_internal_set_device_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(value, GetArena());
}
inline std::string* DeviceRequest::_internal_mutable_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_name_.Mutable( GetArena());
}
inline std::string* DeviceRequest::release_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceRequest.device_name)
  return _impl_.device_name_.Release();
}
inline void DeviceRequest::set_allocated_device_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_name_.IsDefault()) {
          _impl_.device_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceRequest.device_name)
}

// -------------------------------------------------------------------

// DeviceProfileListResponse

// .StreamDeckAPI.Response response = 1;
inline bool DeviceProfileListResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void DeviceProfileListResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& DeviceProfileListResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& DeviceProfileListResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceProfileListResponse.response)
  return _internal_response();
}
inline void DeviceProfileListResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.DeviceProfileListResponse.response)
}
inline ::StreamDeckAPI::Response* DeviceProfileListResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* DeviceProfileListResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceProfileListResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* DeviceProfileListResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* DeviceProfileListResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceProfileListResponse.response)
  return _msg;
}
inline void DeviceProfileListResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceProfileListResponse.response)
}

// repeated string profiles = 2;
inline int DeviceProfileListResponse::_internal_profiles_size() const {
  return _internal_profiles().size();
}
inline int DeviceProfileListResponse::profiles_size() const {
  return _internal_profiles_size();
}
inline void DeviceProfileListResponse::clear_profiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profiles_.Clear();
}
inline std::string* DeviceProfileListResponse::add_profiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_profiles()->Add();
  // @@protoc_insertion_point(field_add_mutable:StreamDeckAPI.DeviceProfileListResponse.profiles)
  return _s;
}
inline const std::string& DeviceProfileListResponse::profiles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceProfileListResponse.profiles)
  return _internal_profiles().Get(index);
}
inline std::string* DeviceProfileListResponse::mutable_profiles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceProfileListResponse.profiles)
  return _internal_mutable_profiles()->Mutable(index);
}
inline void DeviceProfileListResponse::set_profiles(int index, const std::string& value) {
  _internal_mutable_profiles()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline void DeviceProfileListResponse::set_profiles(int index, std::string&& value) {
  _internal_mutable_profiles()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline void DeviceProfileListResponse::set_profiles(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_profiles()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline void DeviceProfileListResponse::set_profiles(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_profiles()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline void DeviceProfileListResponse::set_profiles(int index, absl::string_view value) {
  _internal_mutable_profiles()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline void DeviceProfileListResponse::add_profiles(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_profiles()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline void DeviceProfileListResponse::add_profiles(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_profiles()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline void DeviceProfileListResponse::add_profiles(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_profiles()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline void DeviceProfileListResponse::add_profiles(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_profiles()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline void DeviceProfileListResponse::add_profiles(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_profiles()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:StreamDeckAPI.DeviceProfileListResponse.profiles)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceProfileListResponse::profiles() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:StreamDeckAPI.DeviceProfileListResponse.profiles)
  return _internal_profiles();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceProfileListResponse::mutable_profiles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:StreamDeckAPI.DeviceProfileListResponse.profiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_profiles();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceProfileListResponse::_internal_profiles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.profiles_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceProfileListResponse::_internal_mutable_profiles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.profiles_;
}

// -------------------------------------------------------------------

// DeviceCurrentProfileResponse

// .StreamDeckAPI.Response response = 1;
inline bool DeviceCurrentProfileResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void DeviceCurrentProfileResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& DeviceCurrentProfileResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& DeviceCurrentProfileResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceCurrentProfileResponse.response)
  return _internal_response();
}
inline void DeviceCurrentProfileResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.DeviceCurrentProfileResponse.response)
}
inline ::StreamDeckAPI::Response* DeviceCurrentProfileResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* DeviceCurrentProfileResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceCurrentProfileResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* DeviceCurrentProfileResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* DeviceCurrentProfileResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceCurrentProfileResponse.response)
  return _msg;
}
inline void DeviceCurrentProfileResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceCurrentProfileResponse.response)
}

// string profile = 2;
inline void DeviceCurrentProfileResponse::clear_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_.ClearToEmpty();
}
inline const std::string& DeviceCurrentProfileResponse::profile() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceCurrentProfileResponse.profile)
  return _internal_profile();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceCurrentProfileResponse::set_profile(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.profile_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceCurrentProfileResponse.profile)
}
inline std::string* DeviceCurrentProfileResponse::mutable_profile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceCurrentProfileResponse.profile)
  return _s;
}
inline const std::string& DeviceCurrentProfileResponse::_internal_profile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.profile_.Get();
}
inline void DeviceCurrentProfileResponse::_internal_set_profile(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.profile_.Set(value, GetArena());
}
inline std::string* DeviceCurrentProfileResponse::_internal_mutable_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.profile_.Mutable( GetArena());
}
inline std::string* DeviceCurrentProfileResponse::release_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceCurrentProfileResponse.profile)
  return _impl_.profile_.Release();
}
inline void DeviceCurrentProfileResponse::set_allocated_profile(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.profile_.IsDefault()) {
          _impl_.profile_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceCurrentProfileResponse.profile)
}

// -------------------------------------------------------------------

// DeviceSetProfileRequest

// string device = 1;
inline void DeviceSetProfileRequest::clear_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.ClearToEmpty();
}
inline const std::string& DeviceSetProfileRequest::device() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetProfileRequest.device)
  return _internal_device();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetProfileRequest::set_device(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetProfileRequest.device)
}
inline std::string* DeviceSetProfileRequest::mutable_device() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetProfileRequest.device)
  return _s;
}
inline const std::string& DeviceSetProfileRequest::_internal_device() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_.Get();
}
inline void DeviceSetProfileRequest::_internal_set_device(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(value, GetArena());
}
inline std::string* DeviceSetProfileRequest::_internal_mutable_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_.Mutable( GetArena());
}
inline std::string* DeviceSetProfileRequest::release_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetProfileRequest.device)
  return _impl_.device_.Release();
}
inline void DeviceSetProfileRequest::set_allocated_device(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_.IsDefault()) {
          _impl_.device_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetProfileRequest.device)
}

// string profile = 2;
inline void DeviceSetProfileRequest::clear_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_.ClearToEmpty();
}
inline const std::string& DeviceSetProfileRequest::profile() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetProfileRequest.profile)
  return _internal_profile();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetProfileRequest::set_profile(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.profile_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetProfileRequest.profile)
}
inline std::string* DeviceSetProfileRequest::mutable_profile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetProfileRequest.profile)
  return _s;
}
inline const std::string& DeviceSetProfileRequest::_internal_profile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.profile_.Get();
}
inline void DeviceSetProfileRequest::_internal_set_profile(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.profile_.Set(value, GetArena());
}
inline std::string* DeviceSetProfileRequest::_internal_mutable_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.profile_.Mutable( GetArena());
}
inline std::string* DeviceSetProfileRequest::release_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetProfileRequest.profile)
  return _impl_.profile_.Release();
}
inline void DeviceSetProfileRequest::set_allocated_profile(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.profile_.IsDefault()) {
          _impl_.profile_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetProfileRequest.profile)
}

// -------------------------------------------------------------------

// DevicePageListResponse

// .StreamDeckAPI.Response response = 1;
inline bool DevicePageListResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void DevicePageListResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& DevicePageListResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& DevicePageListResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DevicePageListResponse.response)
  return _internal_response();
}
inline void DevicePageListResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.DevicePageListResponse.response)
}
inline ::StreamDeckAPI::Response* DevicePageListResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* DevicePageListResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DevicePageListResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* DevicePageListResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* DevicePageListResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DevicePageListResponse.response)
  return _msg;
}
inline void DevicePageListResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DevicePageListResponse.response)
}

// repeated string pages = 2;
inline int DevicePageListResponse::_internal_pages_size() const {
  return _internal_pages().size();
}
inline int DevicePageListResponse::pages_size() const {
  return _internal_pages_size();
}
inline void DevicePageListResponse::clear_pages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pages_.Clear();
}
inline std::string* DevicePageListResponse::add_pages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_pages()->Add();
  // @@protoc_insertion_point(field_add_mutable:StreamDeckAPI.DevicePageListResponse.pages)
  return _s;
}
inline const std::string& DevicePageListResponse::pages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DevicePageListResponse.pages)
  return _internal_pages().Get(index);
}
inline std::string* DevicePageListResponse::mutable_pages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DevicePageListResponse.pages)
  return _internal_mutable_pages()->Mutable(index);
}
inline void DevicePageListResponse::set_pages(int index, const std::string& value) {
  _internal_mutable_pages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DevicePageListResponse.pages)
}
inline void DevicePageListResponse::set_pages(int index, std::string&& value) {
  _internal_mutable_pages()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DevicePageListResponse.pages)
}
inline void DevicePageListResponse::set_pages(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_pages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StreamDeckAPI.DevicePageListResponse.pages)
}
inline void DevicePageListResponse::set_pages(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_pages()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StreamDeckAPI.DevicePageListResponse.pages)
}
inline void DevicePageListResponse::set_pages(int index, absl::string_view value) {
  _internal_mutable_pages()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:StreamDeckAPI.DevicePageListResponse.pages)
}
inline void DevicePageListResponse::add_pages(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:StreamDeckAPI.DevicePageListResponse.pages)
}
inline void DevicePageListResponse::add_pages(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pages()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:StreamDeckAPI.DevicePageListResponse.pages)
}
inline void DevicePageListResponse::add_pages(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StreamDeckAPI.DevicePageListResponse.pages)
}
inline void DevicePageListResponse::add_pages(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pages()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StreamDeckAPI.DevicePageListResponse.pages)
}
inline void DevicePageListResponse::add_pages(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pages()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:StreamDeckAPI.DevicePageListResponse.pages)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DevicePageListResponse::pages() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:StreamDeckAPI.DevicePageListResponse.pages)
  return _internal_pages();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DevicePageListResponse::mutable_pages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:StreamDeckAPI.DevicePageListResponse.pages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pages();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DevicePageListResponse::_internal_pages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pages_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DevicePageListResponse::_internal_mutable_pages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pages_;
}

// -------------------------------------------------------------------

// DeviceCurrentPageResponse

// .StreamDeckAPI.Response response = 1;
inline bool DeviceCurrentPageResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void DeviceCurrentPageResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& DeviceCurrentPageResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& DeviceCurrentPageResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceCurrentPageResponse.response)
  return _internal_response();
}
inline void DeviceCurrentPageResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.DeviceCurrentPageResponse.response)
}
inline ::StreamDeckAPI::Response* DeviceCurrentPageResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* DeviceCurrentPageResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceCurrentPageResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* DeviceCurrentPageResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* DeviceCurrentPageResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceCurrentPageResponse.response)
  return _msg;
}
inline void DeviceCurrentPageResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceCurrentPageResponse.response)
}

// string page = 2;
inline void DeviceCurrentPageResponse::clear_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_.ClearToEmpty();
}
inline const std::string& DeviceCurrentPageResponse::page() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceCurrentPageResponse.page)
  return _internal_page();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceCurrentPageResponse::set_page(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceCurrentPageResponse.page)
}
inline std::string* DeviceCurrentPageResponse::mutable_page() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_page();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceCurrentPageResponse.page)
  return _s;
}
inline const std::string& DeviceCurrentPageResponse::_internal_page() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_.Get();
}
inline void DeviceCurrentPageResponse::_internal_set_page(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_.Set(value, GetArena());
}
inline std::string* DeviceCurrentPageResponse::_internal_mutable_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.page_.Mutable( GetArena());
}
inline std::string* DeviceCurrentPageResponse::release_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceCurrentPageResponse.page)
  return _impl_.page_.Release();
}
inline void DeviceCurrentPageResponse::set_allocated_page(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.page_.IsDefault()) {
          _impl_.page_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceCurrentPageResponse.page)
}

// -------------------------------------------------------------------

// DeviceSetPageRequest

// string device = 1;
inline void DeviceSetPageRequest::clear_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.ClearToEmpty();
}
inline const std::string& DeviceSetPageRequest::device() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetPageRequest.device)
  return _internal_device();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetPageRequest::set_device(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetPageRequest.device)
}
inline std::string* DeviceSetPageRequest::mutable_device() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetPageRequest.device)
  return _s;
}
inline const std::string& DeviceSetPageRequest::_internal_device() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_.Get();
}
inline void DeviceSetPageRequest::_internal_set_device(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(value, GetArena());
}
inline std::string* DeviceSetPageRequest::_internal_mutable_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_.Mutable( GetArena());
}
inline std::string* DeviceSetPageRequest::release_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetPageRequest.device)
  return _impl_.device_.Release();
}
inline void DeviceSetPageRequest::set_allocated_device(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_.IsDefault()) {
          _impl_.device_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetPageRequest.device)
}

// string page = 2;
inline void DeviceSetPageRequest::clear_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_.ClearToEmpty();
}
inline const std::string& DeviceSetPageRequest::page() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetPageRequest.page)
  return _internal_page();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetPageRequest::set_page(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetPageRequest.page)
}
inline std::string* DeviceSetPageRequest::mutable_page() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_page();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetPageRequest.page)
  return _s;
}
inline const std::string& DeviceSetPageRequest::_internal_page() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.page_.Get();
}
inline void DeviceSetPageRequest::_internal_set_page(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.page_.Set(value, GetArena());
}
inline std::string* DeviceSetPageRequest::_internal_mutable_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.page_.Mutable( GetArena());
}
inline std::string* DeviceSetPageRequest::release_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetPageRequest.page)
  return _impl_.page_.Release();
}
inline void DeviceSetPageRequest::set_allocated_page(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.page_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.page_.IsDefault()) {
          _impl_.page_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetPageRequest.page)
}

// -------------------------------------------------------------------

// DeviceBrightnessResponse

// .StreamDeckAPI.Response response = 1;
inline bool DeviceBrightnessResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void DeviceBrightnessResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& DeviceBrightnessResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& DeviceBrightnessResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceBrightnessResponse.response)
  return _internal_response();
}
inline void DeviceBrightnessResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.DeviceBrightnessResponse.response)
}
inline ::StreamDeckAPI::Response* DeviceBrightnessResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* DeviceBrightnessResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceBrightnessResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* DeviceBrightnessResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* DeviceBrightnessResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceBrightnessResponse.response)
  return _msg;
}
inline void DeviceBrightnessResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceBrightnessResponse.response)
}

// int32 brightness = 2;
inline void DeviceBrightnessResponse::clear_brightness() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brightness_ = 0;
}
inline ::int32_t DeviceBrightnessResponse::brightness() const {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceBrightnessResponse.brightness)
  return _internal_brightness();
}
inline void DeviceBrightnessResponse::set_brightness(::int32_t value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceBrightnessResponse.brightness)
}
inline ::int32_t DeviceBrightnessResponse::_internal_brightness() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brightness_;
}
inline void DeviceBrightnessResponse::_internal_set_brightness(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brightness_ = value;
}

// -------------------------------------------------------------------

// DeviceSetBrightnessRequest

// string device = 1;
inline void DeviceSetBrightnessRequest::clear_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.ClearToEmpty();
}
inline const std::string& DeviceSetBrightnessRequest::device() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetBrightnessRequest.device)
  return _internal_device();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetBrightnessRequest::set_device(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetBrightnessRequest.device)
}
inline std::string* DeviceSetBrightnessRequest::mutable_device() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetBrightnessRequest.device)
  return _s;
}
inline const std::string& DeviceSetBrightnessRequest::_internal_device() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_.Get();
}
inline void DeviceSetBrightnessRequest::_internal_set_device(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(value, GetArena());
}
inline std::string* DeviceSetBrightnessRequest::_internal_mutable_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_.Mutable( GetArena());
}
inline std::string* DeviceSetBrightnessRequest::release_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetBrightnessRequest.device)
  return _impl_.device_.Release();
}
inline void DeviceSetBrightnessRequest::set_allocated_device(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_.IsDefault()) {
          _impl_.device_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetBrightnessRequest.device)
}

// int32 brightness = 2;
inline void DeviceSetBrightnessRequest::clear_brightness() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brightness_ = 0;
}
inline ::int32_t DeviceSetBrightnessRequest::brightness() const {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetBrightnessRequest.brightness)
  return _internal_brightness();
}
inline void DeviceSetBrightnessRequest::set_brightness(::int32_t value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetBrightnessRequest.brightness)
}
inline ::int32_t DeviceSetBrightnessRequest::_internal_brightness() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brightness_;
}
inline void DeviceSetBrightnessRequest::_internal_set_brightness(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brightness_ = value;
}

// -------------------------------------------------------------------

// DeviceButtonRequest

// string device_name = 1;
inline void DeviceButtonRequest::clear_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& DeviceButtonRequest::device_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceButtonRequest.device_name)
  return _internal_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceButtonRequest::set_device_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceButtonRequest.device_name)
}
inline std::string* DeviceButtonRequest::mutable_device_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceButtonRequest.device_name)
  return _s;
}
inline const std::string& DeviceButtonRequest::_internal_device_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_name_.Get();
}
inline void DeviceButtonRequest::_internal_set_device_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(value, GetArena());
}
inline std::string* DeviceButtonRequest::_internal_mutable_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_name_.Mutable( GetArena());
}
inline std::string* DeviceButtonRequest::release_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceButtonRequest.device_name)
  return _impl_.device_name_.Release();
}
inline void DeviceButtonRequest::set_allocated_device_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_name_.IsDefault()) {
          _impl_.device_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceButtonRequest.device_name)
}

// int32 button = 2;
inline void DeviceButtonRequest::clear_button() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.button_ = 0;
}
inline ::int32_t DeviceButtonRequest::button() const {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceButtonRequest.button)
  return _internal_button();
}
inline void DeviceButtonRequest::set_button(::int32_t value) {
  _internal_set_button(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceButtonRequest.button)
}
inline ::int32_t DeviceButtonRequest::_internal_button() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.button_;
}
inline void DeviceButtonRequest::_internal_set_button(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.button_ = value;
}

// -------------------------------------------------------------------

// DeviceButtonImageResponse

// .StreamDeckAPI.Response response = 1;
inline bool DeviceButtonImageResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void DeviceButtonImageResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& DeviceButtonImageResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& DeviceButtonImageResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceButtonImageResponse.response)
  return _internal_response();
}
inline void DeviceButtonImageResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.DeviceButtonImageResponse.response)
}
inline ::StreamDeckAPI::Response* DeviceButtonImageResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* DeviceButtonImageResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceButtonImageResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* DeviceButtonImageResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* DeviceButtonImageResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceButtonImageResponse.response)
  return _msg;
}
inline void DeviceButtonImageResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceButtonImageResponse.response)
}

// bytes image = 2;
inline void DeviceButtonImageResponse::clear_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.ClearToEmpty();
}
inline const std::string& DeviceButtonImageResponse::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceButtonImageResponse.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceButtonImageResponse::set_image(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceButtonImageResponse.image)
}
inline std::string* DeviceButtonImageResponse::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceButtonImageResponse.image)
  return _s;
}
inline const std::string& DeviceButtonImageResponse::_internal_image() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_.Get();
}
inline void DeviceButtonImageResponse::_internal_set_image(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.Set(value, GetArena());
}
inline std::string* DeviceButtonImageResponse::_internal_mutable_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_.Mutable( GetArena());
}
inline std::string* DeviceButtonImageResponse::release_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceButtonImageResponse.image)
  return _impl_.image_.Release();
}
inline void DeviceButtonImageResponse::set_allocated_image(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceButtonImageResponse.image)
}

// -------------------------------------------------------------------

// DeviceSetButtonImageRequest

// string device = 1;
inline void DeviceSetButtonImageRequest::clear_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.ClearToEmpty();
}
inline const std::string& DeviceSetButtonImageRequest::device() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonImageRequest.device)
  return _internal_device();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetButtonImageRequest::set_device(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonImageRequest.device)
}
inline std::string* DeviceSetButtonImageRequest::mutable_device() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetButtonImageRequest.device)
  return _s;
}
inline const std::string& DeviceSetButtonImageRequest::_internal_device() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_.Get();
}
inline void DeviceSetButtonImageRequest::_internal_set_device(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(value, GetArena());
}
inline std::string* DeviceSetButtonImageRequest::_internal_mutable_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_.Mutable( GetArena());
}
inline std::string* DeviceSetButtonImageRequest::release_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetButtonImageRequest.device)
  return _impl_.device_.Release();
}
inline void DeviceSetButtonImageRequest::set_allocated_device(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_.IsDefault()) {
          _impl_.device_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetButtonImageRequest.device)
}

// int32 button = 2;
inline void DeviceSetButtonImageRequest::clear_button() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.button_ = 0;
}
inline ::int32_t DeviceSetButtonImageRequest::button() const {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonImageRequest.button)
  return _internal_button();
}
inline void DeviceSetButtonImageRequest::set_button(::int32_t value) {
  _internal_set_button(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonImageRequest.button)
}
inline ::int32_t DeviceSetButtonImageRequest::_internal_button() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.button_;
}
inline void DeviceSetButtonImageRequest::_internal_set_button(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.button_ = value;
}

// bytes image = 3;
inline void DeviceSetButtonImageRequest::clear_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.ClearToEmpty();
}
inline const std::string& DeviceSetButtonImageRequest::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonImageRequest.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetButtonImageRequest::set_image(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonImageRequest.image)
}
inline std::string* DeviceSetButtonImageRequest::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetButtonImageRequest.image)
  return _s;
}
inline const std::string& DeviceSetButtonImageRequest::_internal_image() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_.Get();
}
inline void DeviceSetButtonImageRequest::_internal_set_image(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.Set(value, GetArena());
}
inline std::string* DeviceSetButtonImageRequest::_internal_mutable_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_.Mutable( GetArena());
}
inline std::string* DeviceSetButtonImageRequest::release_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetButtonImageRequest.image)
  return _impl_.image_.Release();
}
inline void DeviceSetButtonImageRequest::set_allocated_image(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetButtonImageRequest.image)
}

// -------------------------------------------------------------------

// DeviceButtonLabelResponse

// .StreamDeckAPI.Response response = 1;
inline bool DeviceButtonLabelResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void DeviceButtonLabelResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& DeviceButtonLabelResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& DeviceButtonLabelResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceButtonLabelResponse.response)
  return _internal_response();
}
inline void DeviceButtonLabelResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.DeviceButtonLabelResponse.response)
}
inline ::StreamDeckAPI::Response* DeviceButtonLabelResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* DeviceButtonLabelResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceButtonLabelResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* DeviceButtonLabelResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* DeviceButtonLabelResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceButtonLabelResponse.response)
  return _msg;
}
inline void DeviceButtonLabelResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceButtonLabelResponse.response)
}

// string label = 2;
inline void DeviceButtonLabelResponse::clear_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& DeviceButtonLabelResponse::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceButtonLabelResponse.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceButtonLabelResponse::set_label(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceButtonLabelResponse.label)
}
inline std::string* DeviceButtonLabelResponse::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceButtonLabelResponse.label)
  return _s;
}
inline const std::string& DeviceButtonLabelResponse::_internal_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.label_.Get();
}
inline void DeviceButtonLabelResponse::_internal_set_label(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(value, GetArena());
}
inline std::string* DeviceButtonLabelResponse::_internal_mutable_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* DeviceButtonLabelResponse::release_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceButtonLabelResponse.label)
  return _impl_.label_.Release();
}
inline void DeviceButtonLabelResponse::set_allocated_label(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceButtonLabelResponse.label)
}

// -------------------------------------------------------------------

// DeviceSetButtonLabelRequest

// string device = 1;
inline void DeviceSetButtonLabelRequest::clear_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.ClearToEmpty();
}
inline const std::string& DeviceSetButtonLabelRequest::device() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonLabelRequest.device)
  return _internal_device();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetButtonLabelRequest::set_device(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonLabelRequest.device)
}
inline std::string* DeviceSetButtonLabelRequest::mutable_device() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetButtonLabelRequest.device)
  return _s;
}
inline const std::string& DeviceSetButtonLabelRequest::_internal_device() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_.Get();
}
inline void DeviceSetButtonLabelRequest::_internal_set_device(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(value, GetArena());
}
inline std::string* DeviceSetButtonLabelRequest::_internal_mutable_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_.Mutable( GetArena());
}
inline std::string* DeviceSetButtonLabelRequest::release_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetButtonLabelRequest.device)
  return _impl_.device_.Release();
}
inline void DeviceSetButtonLabelRequest::set_allocated_device(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_.IsDefault()) {
          _impl_.device_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetButtonLabelRequest.device)
}

// int32 button = 2;
inline void DeviceSetButtonLabelRequest::clear_button() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.button_ = 0;
}
inline ::int32_t DeviceSetButtonLabelRequest::button() const {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonLabelRequest.button)
  return _internal_button();
}
inline void DeviceSetButtonLabelRequest::set_button(::int32_t value) {
  _internal_set_button(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonLabelRequest.button)
}
inline ::int32_t DeviceSetButtonLabelRequest::_internal_button() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.button_;
}
inline void DeviceSetButtonLabelRequest::_internal_set_button(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.button_ = value;
}

// string label = 3;
inline void DeviceSetButtonLabelRequest::clear_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& DeviceSetButtonLabelRequest::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonLabelRequest.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetButtonLabelRequest::set_label(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonLabelRequest.label)
}
inline std::string* DeviceSetButtonLabelRequest::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetButtonLabelRequest.label)
  return _s;
}
inline const std::string& DeviceSetButtonLabelRequest::_internal_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.label_.Get();
}
inline void DeviceSetButtonLabelRequest::_internal_set_label(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(value, GetArena());
}
inline std::string* DeviceSetButtonLabelRequest::_internal_mutable_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* DeviceSetButtonLabelRequest::release_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetButtonLabelRequest.label)
  return _impl_.label_.Release();
}
inline void DeviceSetButtonLabelRequest::set_allocated_label(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetButtonLabelRequest.label)
}

// -------------------------------------------------------------------

// DeviceButtonComponentResponse

// .StreamDeckAPI.Response response = 1;
inline bool DeviceButtonComponentResponse::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void DeviceButtonComponentResponse::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response& DeviceButtonComponentResponse::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response&>(::StreamDeckAPI::_Response_default_instance_);
}
inline const ::StreamDeckAPI::Response& DeviceButtonComponentResponse::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceButtonComponentResponse.response)
  return _internal_response();
}
inline void DeviceButtonComponentResponse::unsafe_arena_set_allocated_response(::StreamDeckAPI::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.DeviceButtonComponentResponse.response)
}
inline ::StreamDeckAPI::Response* DeviceButtonComponentResponse::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response* DeviceButtonComponentResponse::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceButtonComponentResponse.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response* DeviceButtonComponentResponse::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(p);
  }
  return _impl_.response_;
}
inline ::StreamDeckAPI::Response* DeviceButtonComponentResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceButtonComponentResponse.response)
  return _msg;
}
inline void DeviceButtonComponentResponse::set_allocated_response(::StreamDeckAPI::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::StreamDeckAPI::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceButtonComponentResponse.response)
}

// string module = 2;
inline void DeviceButtonComponentResponse::clear_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.module_.ClearToEmpty();
}
inline const std::string& DeviceButtonComponentResponse::module() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceButtonComponentResponse.module)
  return _internal_module();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceButtonComponentResponse::set_module(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.module_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceButtonComponentResponse.module)
}
inline std::string* DeviceButtonComponentResponse::mutable_module() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_module();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceButtonComponentResponse.module)
  return _s;
}
inline const std::string& DeviceButtonComponentResponse::_internal_module() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.module_.Get();
}
inline void DeviceButtonComponentResponse::_internal_set_module(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.module_.Set(value, GetArena());
}
inline std::string* DeviceButtonComponentResponse::_internal_mutable_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.module_.Mutable( GetArena());
}
inline std::string* DeviceButtonComponentResponse::release_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceButtonComponentResponse.module)
  return _impl_.module_.Release();
}
inline void DeviceButtonComponentResponse::set_allocated_module(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.module_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.module_.IsDefault()) {
          _impl_.module_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceButtonComponentResponse.module)
}

// string component = 3;
inline void DeviceButtonComponentResponse::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& DeviceButtonComponentResponse::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceButtonComponentResponse.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceButtonComponentResponse::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceButtonComponentResponse.component)
}
inline std::string* DeviceButtonComponentResponse::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceButtonComponentResponse.component)
  return _s;
}
inline const std::string& DeviceButtonComponentResponse::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void DeviceButtonComponentResponse::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* DeviceButtonComponentResponse::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* DeviceButtonComponentResponse::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceButtonComponentResponse.component)
  return _impl_.component_.Release();
}
inline void DeviceButtonComponentResponse::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceButtonComponentResponse.component)
}

// -------------------------------------------------------------------

// DeviceSetButtonModuleComponentRequest

// string device = 1;
inline void DeviceSetButtonModuleComponentRequest::clear_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.ClearToEmpty();
}
inline const std::string& DeviceSetButtonModuleComponentRequest::device() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.device)
  return _internal_device();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetButtonModuleComponentRequest::set_device(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.device)
}
inline std::string* DeviceSetButtonModuleComponentRequest::mutable_device() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.device)
  return _s;
}
inline const std::string& DeviceSetButtonModuleComponentRequest::_internal_device() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_.Get();
}
inline void DeviceSetButtonModuleComponentRequest::_internal_set_device(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_.Set(value, GetArena());
}
inline std::string* DeviceSetButtonModuleComponentRequest::_internal_mutable_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_.Mutable( GetArena());
}
inline std::string* DeviceSetButtonModuleComponentRequest::release_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.device)
  return _impl_.device_.Release();
}
inline void DeviceSetButtonModuleComponentRequest::set_allocated_device(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_.IsDefault()) {
          _impl_.device_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.device)
}

// int32 button = 2;
inline void DeviceSetButtonModuleComponentRequest::clear_button() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.button_ = 0;
}
inline ::int32_t DeviceSetButtonModuleComponentRequest::button() const {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.button)
  return _internal_button();
}
inline void DeviceSetButtonModuleComponentRequest::set_button(::int32_t value) {
  _internal_set_button(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.button)
}
inline ::int32_t DeviceSetButtonModuleComponentRequest::_internal_button() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.button_;
}
inline void DeviceSetButtonModuleComponentRequest::_internal_set_button(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.button_ = value;
}

// string module = 3;
inline void DeviceSetButtonModuleComponentRequest::clear_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.module_.ClearToEmpty();
}
inline const std::string& DeviceSetButtonModuleComponentRequest::module() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.module)
  return _internal_module();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetButtonModuleComponentRequest::set_module(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.module_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.module)
}
inline std::string* DeviceSetButtonModuleComponentRequest::mutable_module() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_module();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.module)
  return _s;
}
inline const std::string& DeviceSetButtonModuleComponentRequest::_internal_module() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.module_.Get();
}
inline void DeviceSetButtonModuleComponentRequest::_internal_set_module(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.module_.Set(value, GetArena());
}
inline std::string* DeviceSetButtonModuleComponentRequest::_internal_mutable_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.module_.Mutable( GetArena());
}
inline std::string* DeviceSetButtonModuleComponentRequest::release_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.module)
  return _impl_.module_.Release();
}
inline void DeviceSetButtonModuleComponentRequest::set_allocated_module(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.module_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.module_.IsDefault()) {
          _impl_.module_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.module)
}

// string component = 4;
inline void DeviceSetButtonModuleComponentRequest::clear_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.ClearToEmpty();
}
inline const std::string& DeviceSetButtonModuleComponentRequest::component() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.component)
  return _internal_component();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSetButtonModuleComponentRequest::set_component(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.component)
}
inline std::string* DeviceSetButtonModuleComponentRequest::mutable_component() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.component)
  return _s;
}
inline const std::string& DeviceSetButtonModuleComponentRequest::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_.Get();
}
inline void DeviceSetButtonModuleComponentRequest::_internal_set_component(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.component_.Set(value, GetArena());
}
inline std::string* DeviceSetButtonModuleComponentRequest::_internal_mutable_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.component_.Mutable( GetArena());
}
inline std::string* DeviceSetButtonModuleComponentRequest::release_component() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.component)
  return _impl_.component_.Release();
}
inline void DeviceSetButtonModuleComponentRequest::set_allocated_component(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.component_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.component_.IsDefault()) {
          _impl_.component_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.DeviceSetButtonModuleComponentRequest.component)
}

// -------------------------------------------------------------------

// Response_Error

// string message = 1;
inline void Response_Error::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Response_Error::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.Response.Error.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Response_Error::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.Response.Error.message)
}
inline std::string* Response_Error::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.Response.Error.message)
  return _s;
}
inline const std::string& Response_Error::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void Response_Error::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Response_Error::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Response_Error::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.Response.Error.message)
  return _impl_.message_.Release();
}
inline void Response_Error::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.Response.Error.message)
}

// -------------------------------------------------------------------

// Response

// int32 code = 1;
inline void Response::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::int32_t Response::code() const {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.Response.code)
  return _internal_code();
}
inline void Response::set_code(::int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.Response.code)
}
inline ::int32_t Response::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_;
}
inline void Response::_internal_set_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_ = value;
}

// .StreamDeckAPI.Response.Error error = 2;
inline bool Response::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void Response::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StreamDeckAPI::Response_Error& Response::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::StreamDeckAPI::Response_Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::StreamDeckAPI::Response_Error&>(::StreamDeckAPI::_Response_Error_default_instance_);
}
inline const ::StreamDeckAPI::Response_Error& Response::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.Response.error)
  return _internal_error();
}
inline void Response::unsafe_arena_set_allocated_error(::StreamDeckAPI::Response_Error* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::StreamDeckAPI::Response_Error*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StreamDeckAPI.Response.error)
}
inline ::StreamDeckAPI::Response_Error* Response::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response_Error* released = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::StreamDeckAPI::Response_Error* Response::unsafe_arena_release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.Response.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StreamDeckAPI::Response_Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::StreamDeckAPI::Response_Error* Response::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::StreamDeckAPI::Response_Error>(GetArena());
    _impl_.error_ = reinterpret_cast<::StreamDeckAPI::Response_Error*>(p);
  }
  return _impl_.error_;
}
inline ::StreamDeckAPI::Response_Error* Response::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::StreamDeckAPI::Response_Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.Response.error)
  return _msg;
}
inline void Response::set_allocated_error(::StreamDeckAPI::Response_Error* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::StreamDeckAPI::Response_Error*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::StreamDeckAPI::Response_Error*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::StreamDeckAPI::Response_Error*>(value);
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.Response.error)
}

// -------------------------------------------------------------------

// Module

// string name = 1;
inline void Module::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Module::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.Module.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Module::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StreamDeckAPI.Module.name)
}
inline std::string* Module::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.Module.name)
  return _s;
}
inline const std::string& Module::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Module::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Module::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Module::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:StreamDeckAPI.Module.name)
  return _impl_.name_.Release();
}
inline void Module::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StreamDeckAPI.Module.name)
}

// repeated string components = 2;
inline int Module::_internal_components_size() const {
  return _internal_components().size();
}
inline int Module::components_size() const {
  return _internal_components_size();
}
inline void Module::clear_components() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.components_.Clear();
}
inline std::string* Module::add_components()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_components()->Add();
  // @@protoc_insertion_point(field_add_mutable:StreamDeckAPI.Module.components)
  return _s;
}
inline const std::string& Module::components(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StreamDeckAPI.Module.components)
  return _internal_components().Get(index);
}
inline std::string* Module::mutable_components(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:StreamDeckAPI.Module.components)
  return _internal_mutable_components()->Mutable(index);
}
inline void Module::set_components(int index, const std::string& value) {
  _internal_mutable_components()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StreamDeckAPI.Module.components)
}
inline void Module::set_components(int index, std::string&& value) {
  _internal_mutable_components()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StreamDeckAPI.Module.components)
}
inline void Module::set_components(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_components()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StreamDeckAPI.Module.components)
}
inline void Module::set_components(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_components()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StreamDeckAPI.Module.components)
}
inline void Module::set_components(int index, absl::string_view value) {
  _internal_mutable_components()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:StreamDeckAPI.Module.components)
}
inline void Module::add_components(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_components()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:StreamDeckAPI.Module.components)
}
inline void Module::add_components(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_components()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:StreamDeckAPI.Module.components)
}
inline void Module::add_components(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_components()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StreamDeckAPI.Module.components)
}
inline void Module::add_components(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_components()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StreamDeckAPI.Module.components)
}
inline void Module::add_components(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_components()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:StreamDeckAPI.Module.components)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Module::components() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:StreamDeckAPI.Module.components)
  return _internal_components();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Module::mutable_components() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:StreamDeckAPI.Module.components)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_components();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Module::_internal_components() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.components_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Module::_internal_mutable_components() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.components_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace StreamDeckAPI


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2eproto_2epb_2eh
