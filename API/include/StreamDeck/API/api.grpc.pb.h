// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto
#ifndef GRPC_api_2eproto__INCLUDED
#define GRPC_api_2eproto__INCLUDED

#include "api.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace StreamDeckAPI {

class StreamDeckAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "StreamDeckAPI.StreamDeckAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // get list of all modules and components inside modules
    virtual ::grpc::Status GetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::StreamDeckAPI::ModuleListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::ModuleListResponse>> AsyncGetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::ModuleListResponse>>(AsyncGetComponentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::ModuleListResponse>> PrepareAsyncGetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::ModuleListResponse>>(PrepareAsyncGetComponentsRaw(context, request, cq));
    }
    // get list of all connected devices
    virtual ::grpc::Status GetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::StreamDeckAPI::DeviceListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceListResponse>> AsyncGetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceListResponse>>(AsyncGetDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceListResponse>> PrepareAsyncGetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceListResponse>>(PrepareAsyncGetDevicesRaw(context, request, cq));
    }
    // set device brightness
    virtual ::grpc::Status SetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::StreamDeckAPI::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> AsyncSetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(AsyncSetDeviceBrightnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceBrightnessRaw(context, request, cq));
    }
    // get device brightness
    virtual ::grpc::Status GetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceBrightnessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceBrightnessResponse>> AsyncGetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceBrightnessResponse>>(AsyncGetDeviceBrightnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceBrightnessResponse>> PrepareAsyncGetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceBrightnessResponse>>(PrepareAsyncGetDeviceBrightnessRaw(context, request, cq));
    }
    // get list of all device profiles
    virtual ::grpc::Status GetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceProfileListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceProfileListResponse>> AsyncGetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceProfileListResponse>>(AsyncGetDeviceProfilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceProfileListResponse>> PrepareAsyncGetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceProfileListResponse>>(PrepareAsyncGetDeviceProfilesRaw(context, request, cq));
    }
    // get current device profile
    virtual ::grpc::Status GetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentProfileResponse>> AsyncGetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentProfileResponse>>(AsyncGetDeviceCurrentProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentProfileResponse>> PrepareAsyncGetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentProfileResponse>>(PrepareAsyncGetDeviceCurrentProfileRaw(context, request, cq));
    }
    // set device current profile
    virtual ::grpc::Status SetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::StreamDeckAPI::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> AsyncSetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(AsyncSetDeviceCurrentProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceCurrentProfileRaw(context, request, cq));
    }
    // get list of all device pages
    virtual ::grpc::Status GetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DevicePageListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DevicePageListResponse>> AsyncGetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DevicePageListResponse>>(AsyncGetDevicePagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DevicePageListResponse>> PrepareAsyncGetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DevicePageListResponse>>(PrepareAsyncGetDevicePagesRaw(context, request, cq));
    }
    // get device current page
    virtual ::grpc::Status GetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceCurrentPageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentPageResponse>> AsyncGetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentPageResponse>>(AsyncGetDeviceCurrentPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentPageResponse>> PrepareAsyncGetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentPageResponse>>(PrepareAsyncGetDeviceCurrentPageRaw(context, request, cq));
    }
    // set device current page
    virtual ::grpc::Status SetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::StreamDeckAPI::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> AsyncSetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(AsyncSetDeviceCurrentPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceCurrentPageRaw(context, request, cq));
    }
    // get device button image
    virtual ::grpc::Status GetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::StreamDeckAPI::DeviceButtonImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonImageResponse>> AsyncGetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonImageResponse>>(AsyncGetDeviceButtonImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonImageResponse>> PrepareAsyncGetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonImageResponse>>(PrepareAsyncGetDeviceButtonImageRaw(context, request, cq));
    }
    // set device button image
    virtual ::grpc::Status SetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::StreamDeckAPI::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> AsyncSetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(AsyncSetDeviceButtonImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceButtonImageRaw(context, request, cq));
    }
    // get device button label
    virtual ::grpc::Status GetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::StreamDeckAPI::DeviceButtonLabelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonLabelResponse>> AsyncGetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonLabelResponse>>(AsyncGetDeviceButtonLabelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonLabelResponse>> PrepareAsyncGetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonLabelResponse>>(PrepareAsyncGetDeviceButtonLabelRaw(context, request, cq));
    }
    // set device button label
    virtual ::grpc::Status SetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::StreamDeckAPI::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> AsyncSetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(AsyncSetDeviceButtonLabelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceButtonLabelRaw(context, request, cq));
    }
    // get device button component
    virtual ::grpc::Status GetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::StreamDeckAPI::DeviceButtonComponentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonComponentResponse>> AsyncGetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonComponentResponse>>(AsyncGetDeviceButtonModuleComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonComponentResponse>> PrepareAsyncGetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonComponentResponse>>(PrepareAsyncGetDeviceButtonModuleComponentRaw(context, request, cq));
    }
    // set device button component
    virtual ::grpc::Status SetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::StreamDeckAPI::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> AsyncSetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(AsyncSetDeviceButtonModuleComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceButtonModuleComponentRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // get list of all modules and components inside modules
      virtual void GetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::ModuleListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::ModuleListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get list of all connected devices
      virtual void GetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::DeviceListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::DeviceListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set device brightness
      virtual void SetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get device brightness
      virtual void GetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceBrightnessResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceBrightnessResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get list of all device profiles
      virtual void GetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceProfileListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceProfileListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get current device profile
      virtual void GetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set device current profile
      virtual void SetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get list of all device pages
      virtual void GetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DevicePageListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DevicePageListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get device current page
      virtual void GetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentPageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentPageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set device current page
      virtual void SetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get device button image
      virtual void GetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set device button image
      virtual void SetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get device button label
      virtual void GetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonLabelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonLabelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set device button label
      virtual void SetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get device button component
      virtual void GetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonComponentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // set device button component
      virtual void SetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::ModuleListResponse>* AsyncGetComponentsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::ModuleListResponse>* PrepareAsyncGetComponentsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceListResponse>* AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceListResponse>* PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* AsyncSetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceBrightnessResponse>* AsyncGetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceBrightnessResponse>* PrepareAsyncGetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceProfileListResponse>* AsyncGetDeviceProfilesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceProfileListResponse>* PrepareAsyncGetDeviceProfilesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentProfileResponse>* AsyncGetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentProfileResponse>* PrepareAsyncGetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* AsyncSetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DevicePageListResponse>* AsyncGetDevicePagesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DevicePageListResponse>* PrepareAsyncGetDevicePagesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentPageResponse>* AsyncGetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceCurrentPageResponse>* PrepareAsyncGetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* AsyncSetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonImageResponse>* AsyncGetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonImageResponse>* PrepareAsyncGetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* AsyncSetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonLabelResponse>* AsyncGetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonLabelResponse>* PrepareAsyncGetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* AsyncSetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonComponentResponse>* AsyncGetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::DeviceButtonComponentResponse>* PrepareAsyncGetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* AsyncSetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::StreamDeckAPI::ModuleListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::ModuleListResponse>> AsyncGetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::ModuleListResponse>>(AsyncGetComponentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::ModuleListResponse>> PrepareAsyncGetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::ModuleListResponse>>(PrepareAsyncGetComponentsRaw(context, request, cq));
    }
    ::grpc::Status GetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::StreamDeckAPI::DeviceListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceListResponse>> AsyncGetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceListResponse>>(AsyncGetDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceListResponse>> PrepareAsyncGetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceListResponse>>(PrepareAsyncGetDevicesRaw(context, request, cq));
    }
    ::grpc::Status SetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::StreamDeckAPI::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> AsyncSetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(AsyncSetDeviceBrightnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceBrightnessRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceBrightnessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceBrightnessResponse>> AsyncGetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceBrightnessResponse>>(AsyncGetDeviceBrightnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceBrightnessResponse>> PrepareAsyncGetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceBrightnessResponse>>(PrepareAsyncGetDeviceBrightnessRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceProfileListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceProfileListResponse>> AsyncGetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceProfileListResponse>>(AsyncGetDeviceProfilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceProfileListResponse>> PrepareAsyncGetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceProfileListResponse>>(PrepareAsyncGetDeviceProfilesRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentProfileResponse>> AsyncGetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentProfileResponse>>(AsyncGetDeviceCurrentProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentProfileResponse>> PrepareAsyncGetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentProfileResponse>>(PrepareAsyncGetDeviceCurrentProfileRaw(context, request, cq));
    }
    ::grpc::Status SetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::StreamDeckAPI::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> AsyncSetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(AsyncSetDeviceCurrentProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceCurrentProfileRaw(context, request, cq));
    }
    ::grpc::Status GetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DevicePageListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DevicePageListResponse>> AsyncGetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DevicePageListResponse>>(AsyncGetDevicePagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DevicePageListResponse>> PrepareAsyncGetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DevicePageListResponse>>(PrepareAsyncGetDevicePagesRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceCurrentPageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentPageResponse>> AsyncGetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentPageResponse>>(AsyncGetDeviceCurrentPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentPageResponse>> PrepareAsyncGetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentPageResponse>>(PrepareAsyncGetDeviceCurrentPageRaw(context, request, cq));
    }
    ::grpc::Status SetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::StreamDeckAPI::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> AsyncSetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(AsyncSetDeviceCurrentPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceCurrentPageRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::StreamDeckAPI::DeviceButtonImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonImageResponse>> AsyncGetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonImageResponse>>(AsyncGetDeviceButtonImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonImageResponse>> PrepareAsyncGetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonImageResponse>>(PrepareAsyncGetDeviceButtonImageRaw(context, request, cq));
    }
    ::grpc::Status SetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::StreamDeckAPI::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> AsyncSetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(AsyncSetDeviceButtonImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceButtonImageRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::StreamDeckAPI::DeviceButtonLabelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonLabelResponse>> AsyncGetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonLabelResponse>>(AsyncGetDeviceButtonLabelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonLabelResponse>> PrepareAsyncGetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonLabelResponse>>(PrepareAsyncGetDeviceButtonLabelRaw(context, request, cq));
    }
    ::grpc::Status SetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::StreamDeckAPI::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> AsyncSetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(AsyncSetDeviceButtonLabelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceButtonLabelRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::StreamDeckAPI::DeviceButtonComponentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonComponentResponse>> AsyncGetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonComponentResponse>>(AsyncGetDeviceButtonModuleComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonComponentResponse>> PrepareAsyncGetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonComponentResponse>>(PrepareAsyncGetDeviceButtonModuleComponentRaw(context, request, cq));
    }
    ::grpc::Status SetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::StreamDeckAPI::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> AsyncSetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(AsyncSetDeviceButtonModuleComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>> PrepareAsyncSetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>>(PrepareAsyncSetDeviceButtonModuleComponentRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::ModuleListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::ModuleListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::DeviceListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::DeviceListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) override;
      void SetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceBrightnessResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceBrightnessResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceProfileListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceProfileListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) override;
      void SetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DevicePageListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DevicePageListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentPageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentPageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) override;
      void SetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonImageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) override;
      void SetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonLabelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonLabelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) override;
      void SetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonComponentResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)>) override;
      void SetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::ModuleListResponse>* AsyncGetComponentsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::ModuleListResponse>* PrepareAsyncGetComponentsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceListResponse>* AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceListResponse>* PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* AsyncSetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceBrightnessResponse>* AsyncGetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceBrightnessResponse>* PrepareAsyncGetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceProfileListResponse>* AsyncGetDeviceProfilesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceProfileListResponse>* PrepareAsyncGetDeviceProfilesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentProfileResponse>* AsyncGetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentProfileResponse>* PrepareAsyncGetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* AsyncSetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DevicePageListResponse>* AsyncGetDevicePagesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DevicePageListResponse>* PrepareAsyncGetDevicePagesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentPageResponse>* AsyncGetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentPageResponse>* PrepareAsyncGetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* AsyncSetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonImageResponse>* AsyncGetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonImageResponse>* PrepareAsyncGetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* AsyncSetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonLabelResponse>* AsyncGetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonLabelResponse>* PrepareAsyncGetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* AsyncSetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonComponentResponse>* AsyncGetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonComponentResponse>* PrepareAsyncGetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* AsyncSetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* PrepareAsyncSetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetComponents_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeviceBrightness_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceBrightness_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceProfiles_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceCurrentProfile_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeviceCurrentProfile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevicePages_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceCurrentPage_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeviceCurrentPage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceButtonImage_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeviceButtonImage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceButtonLabel_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeviceButtonLabel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceButtonModuleComponent_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeviceButtonModuleComponent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // get list of all modules and components inside modules
    virtual ::grpc::Status GetComponents(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::ModuleListResponse* response);
    // get list of all connected devices
    virtual ::grpc::Status GetDevices(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::DeviceListResponse* response);
    // set device brightness
    virtual ::grpc::Status SetDeviceBrightness(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::StreamDeckAPI::Response* response);
    // get device brightness
    virtual ::grpc::Status GetDeviceBrightness(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceBrightnessResponse* response);
    // get list of all device profiles
    virtual ::grpc::Status GetDeviceProfiles(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceProfileListResponse* response);
    // get current device profile
    virtual ::grpc::Status GetDeviceCurrentProfile(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response);
    // set device current profile
    virtual ::grpc::Status SetDeviceCurrentProfile(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest* request, ::StreamDeckAPI::Response* response);
    // get list of all device pages
    virtual ::grpc::Status GetDevicePages(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DevicePageListResponse* response);
    // get device current page
    virtual ::grpc::Status GetDeviceCurrentPage(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentPageResponse* response);
    // set device current page
    virtual ::grpc::Status SetDeviceCurrentPage(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetPageRequest* request, ::StreamDeckAPI::Response* response);
    // get device button image
    virtual ::grpc::Status GetDeviceButtonImage(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonImageResponse* response);
    // set device button image
    virtual ::grpc::Status SetDeviceButtonImage(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::StreamDeckAPI::Response* response);
    // get device button label
    virtual ::grpc::Status GetDeviceButtonLabel(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonLabelResponse* response);
    // set device button label
    virtual ::grpc::Status SetDeviceButtonLabel(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::StreamDeckAPI::Response* response);
    // get device button component
    virtual ::grpc::Status GetDeviceButtonModuleComponent(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonComponentResponse* response);
    // set device button component
    virtual ::grpc::Status SetDeviceButtonModuleComponent(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::StreamDeckAPI::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetComponents() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponents(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::ModuleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetComponents(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::ModuleListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDevices() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::DeviceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevices(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::DeviceListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeviceBrightness() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetBrightnessRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceBrightness(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceBrightness() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceBrightnessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceBrightness(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::DeviceBrightnessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceProfiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceProfiles() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetDeviceProfiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceProfiles(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceProfileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceProfiles(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::DeviceProfileListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceCurrentProfile(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::DeviceCurrentProfileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetProfileRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceCurrentProfile(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceSetProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevicePages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDevicePages() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetDevicePages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePages(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DevicePageListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevicePages(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::DevicePageListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentPageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceCurrentPage(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::DeviceCurrentPageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetPageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceCurrentPage(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceSetPageRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceButtonImage() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceButtonImage(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceButtonRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::DeviceButtonImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeviceButtonImage() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonImageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceButtonImage(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonLabelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceButtonLabel(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceButtonRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::DeviceButtonLabelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceButtonLabel(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceButtonModuleComponent(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceButtonRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::DeviceButtonComponentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceButtonModuleComponent(::grpc::ServerContext* context, ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::grpc::ServerAsyncResponseWriter< ::StreamDeckAPI::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetComponents<WithAsyncMethod_GetDevices<WithAsyncMethod_SetDeviceBrightness<WithAsyncMethod_GetDeviceBrightness<WithAsyncMethod_GetDeviceProfiles<WithAsyncMethod_GetDeviceCurrentProfile<WithAsyncMethod_SetDeviceCurrentProfile<WithAsyncMethod_GetDevicePages<WithAsyncMethod_GetDeviceCurrentPage<WithAsyncMethod_SetDeviceCurrentPage<WithAsyncMethod_GetDeviceButtonImage<WithAsyncMethod_SetDeviceButtonImage<WithAsyncMethod_GetDeviceButtonLabel<WithAsyncMethod_SetDeviceButtonLabel<WithAsyncMethod_GetDeviceButtonModuleComponent<WithAsyncMethod_SetDeviceButtonModuleComponent<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetComponents() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::StreamDeckAPI::ModuleListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::ModuleListResponse* response) { return this->GetComponents(context, request, response); }));}
    void SetMessageAllocatorFor_GetComponents(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::StreamDeckAPI::ModuleListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::StreamDeckAPI::ModuleListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponents(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::ModuleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetComponents(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::ModuleListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDevices() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::StreamDeckAPI::DeviceListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::DeviceListResponse* response) { return this->GetDevices(context, request, response); }));}
    void SetMessageAllocatorFor_GetDevices(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::StreamDeckAPI::DeviceListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::StreamDeckAPI::DeviceListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::DeviceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::DeviceListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDeviceBrightness() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetBrightnessRequest, ::StreamDeckAPI::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::StreamDeckAPI::Response* response) { return this->SetDeviceBrightness(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeviceBrightness(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceSetBrightnessRequest, ::StreamDeckAPI::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetBrightnessRequest, ::StreamDeckAPI::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetBrightnessRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceBrightness(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetBrightnessRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceBrightness() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceBrightnessResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceBrightnessResponse* response) { return this->GetDeviceBrightness(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceBrightness(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceBrightnessResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceBrightnessResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceBrightnessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceBrightness(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceBrightnessResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceProfiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceProfiles() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceProfileListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceProfileListResponse* response) { return this->GetDeviceProfiles(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceProfiles(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceProfileListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceProfileListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceProfiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceProfiles(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceProfileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceProfiles(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceProfileListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentProfileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response) { return this->GetDeviceCurrentProfile(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceCurrentProfile(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentProfileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentProfileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceCurrentProfile(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentProfileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetProfileRequest, ::StreamDeckAPI::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest* request, ::StreamDeckAPI::Response* response) { return this->SetDeviceCurrentProfile(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeviceCurrentProfile(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceSetProfileRequest, ::StreamDeckAPI::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetProfileRequest, ::StreamDeckAPI::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetProfileRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceCurrentProfile(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetProfileRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDevicePages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDevicePages() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DevicePageListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DevicePageListResponse* response) { return this->GetDevicePages(context, request, response); }));}
    void SetMessageAllocatorFor_GetDevicePages(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DevicePageListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DevicePageListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDevicePages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePages(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DevicePageListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevicePages(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DevicePageListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentPageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentPageResponse* response) { return this->GetDeviceCurrentPage(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceCurrentPage(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentPageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentPageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentPageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceCurrentPage(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentPageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetPageRequest, ::StreamDeckAPI::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceSetPageRequest* request, ::StreamDeckAPI::Response* response) { return this->SetDeviceCurrentPage(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeviceCurrentPage(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceSetPageRequest, ::StreamDeckAPI::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetPageRequest, ::StreamDeckAPI::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetPageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceCurrentPage(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetPageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceButtonImage() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonImageResponse* response) { return this->GetDeviceButtonImage(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceButtonImage(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceButtonImage(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDeviceButtonImage() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetButtonImageRequest, ::StreamDeckAPI::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::StreamDeckAPI::Response* response) { return this->SetDeviceButtonImage(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeviceButtonImage(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceSetButtonImageRequest, ::StreamDeckAPI::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetButtonImageRequest, ::StreamDeckAPI::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonImageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceButtonImage(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonImageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonLabelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonLabelResponse* response) { return this->GetDeviceButtonLabel(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceButtonLabel(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonLabelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonLabelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonLabelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceButtonLabel(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonLabelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetButtonLabelRequest, ::StreamDeckAPI::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::StreamDeckAPI::Response* response) { return this->SetDeviceButtonLabel(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeviceButtonLabel(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceSetButtonLabelRequest, ::StreamDeckAPI::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetButtonLabelRequest, ::StreamDeckAPI::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceButtonLabel(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonComponentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonComponentResponse* response) { return this->GetDeviceButtonModuleComponent(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceButtonModuleComponent(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonComponentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonComponentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceButtonModuleComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonComponentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest, ::StreamDeckAPI::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::StreamDeckAPI::Response* response) { return this->SetDeviceButtonModuleComponent(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeviceButtonModuleComponent(
        ::grpc::MessageAllocator< ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest, ::StreamDeckAPI::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest, ::StreamDeckAPI::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceButtonModuleComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetComponents<WithCallbackMethod_GetDevices<WithCallbackMethod_SetDeviceBrightness<WithCallbackMethod_GetDeviceBrightness<WithCallbackMethod_GetDeviceProfiles<WithCallbackMethod_GetDeviceCurrentProfile<WithCallbackMethod_SetDeviceCurrentProfile<WithCallbackMethod_GetDevicePages<WithCallbackMethod_GetDeviceCurrentPage<WithCallbackMethod_SetDeviceCurrentPage<WithCallbackMethod_GetDeviceButtonImage<WithCallbackMethod_SetDeviceButtonImage<WithCallbackMethod_GetDeviceButtonLabel<WithCallbackMethod_SetDeviceButtonLabel<WithCallbackMethod_GetDeviceButtonModuleComponent<WithCallbackMethod_SetDeviceButtonModuleComponent<Service > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetComponents() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponents(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::ModuleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDevices() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::DeviceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeviceBrightness() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetBrightnessRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceBrightness() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceBrightnessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceProfiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceProfiles() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetDeviceProfiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceProfiles(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceProfileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetProfileRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevicePages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDevicePages() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetDevicePages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePages(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DevicePageListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentPageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetPageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceButtonImage() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeviceButtonImage() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonImageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonLabelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetComponents() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponents(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::ModuleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetComponents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDevices() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::DeviceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeviceBrightness() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetBrightnessRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceBrightness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceBrightness() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceBrightnessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceBrightness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceProfiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceProfiles() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetDeviceProfiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceProfiles(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceProfileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceProfiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceCurrentProfile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetProfileRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceCurrentProfile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevicePages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDevicePages() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetDevicePages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePages(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DevicePageListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevicePages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentPageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceCurrentPage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetPageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceCurrentPage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceButtonImage() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceButtonImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeviceButtonImage() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonImageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceButtonImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonLabelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceButtonLabel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceButtonLabel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceButtonModuleComponent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_SetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeviceButtonModuleComponent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetComponents() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetComponents(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetComponents(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::ModuleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetComponents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDevices() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDevices(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::DeviceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDeviceBrightness() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeviceBrightness(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetBrightnessRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceBrightness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceBrightness() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceBrightness(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceBrightnessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceBrightness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceProfiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceProfiles() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceProfiles(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceProfiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceProfiles(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceProfileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceProfiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceCurrentProfile(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceCurrentProfile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeviceCurrentProfile(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetProfileRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceCurrentProfile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDevicePages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDevicePages() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDevicePages(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDevicePages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePages(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DevicePageListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevicePages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceCurrentPage(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentPageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceCurrentPage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeviceCurrentPage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetPageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceCurrentPage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceButtonImage() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceButtonImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceButtonImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDeviceButtonImage() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeviceButtonImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonImageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceButtonImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceButtonLabel(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonLabelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceButtonLabel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeviceButtonLabel(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceButtonLabel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceButtonModuleComponent(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceButtonModuleComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeviceButtonModuleComponent(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDeviceButtonModuleComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetComponents() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::StreamDeckAPI::ModuleListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::StreamDeckAPI::ModuleListResponse>* streamer) {
                       return this->StreamedGetComponents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetComponents(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::ModuleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetComponents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::StreamDeckAPI::ModuleListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDevices() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::StreamDeckAPI::DeviceListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::StreamDeckAPI::DeviceListResponse>* streamer) {
                       return this->StreamedGetDevices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::StreamDeckAPI::DeviceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDevices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::StreamDeckAPI::DeviceListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeviceBrightness() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceSetBrightnessRequest, ::StreamDeckAPI::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceSetBrightnessRequest, ::StreamDeckAPI::Response>* streamer) {
                       return this->StreamedSetDeviceBrightness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetBrightnessRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeviceBrightness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceSetBrightnessRequest,::StreamDeckAPI::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceBrightness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceBrightness() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceBrightnessResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceBrightnessResponse>* streamer) {
                       return this->StreamedGetDeviceBrightness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceBrightness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceBrightness(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceBrightnessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceBrightness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceRequest,::StreamDeckAPI::DeviceBrightnessResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceProfiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceProfiles() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceProfileListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceProfileListResponse>* streamer) {
                       return this->StreamedGetDeviceProfiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceProfiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceProfiles(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceProfileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceProfiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceRequest,::StreamDeckAPI::DeviceProfileListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentProfileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentProfileResponse>* streamer) {
                       return this->StreamedGetDeviceCurrentProfile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceCurrentProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceRequest,::StreamDeckAPI::DeviceCurrentProfileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeviceCurrentProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeviceCurrentProfile() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceSetProfileRequest, ::StreamDeckAPI::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceSetProfileRequest, ::StreamDeckAPI::Response>* streamer) {
                       return this->StreamedSetDeviceCurrentProfile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDeviceCurrentProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeviceCurrentProfile(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetProfileRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeviceCurrentProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceSetProfileRequest,::StreamDeckAPI::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDevicePages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDevicePages() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DevicePageListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DevicePageListResponse>* streamer) {
                       return this->StreamedGetDevicePages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDevicePages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevicePages(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DevicePageListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDevicePages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceRequest,::StreamDeckAPI::DevicePageListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentPageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentPageResponse>* streamer) {
                       return this->StreamedGetDeviceCurrentPage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceRequest* /*request*/, ::StreamDeckAPI::DeviceCurrentPageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceCurrentPage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceRequest,::StreamDeckAPI::DeviceCurrentPageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeviceCurrentPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeviceCurrentPage() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceSetPageRequest, ::StreamDeckAPI::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceSetPageRequest, ::StreamDeckAPI::Response>* streamer) {
                       return this->StreamedSetDeviceCurrentPage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDeviceCurrentPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeviceCurrentPage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetPageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeviceCurrentPage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceSetPageRequest,::StreamDeckAPI::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceButtonImage() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonImageResponse>* streamer) {
                       return this->StreamedGetDeviceButtonImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceButtonImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceButtonRequest,::StreamDeckAPI::DeviceButtonImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeviceButtonImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeviceButtonImage() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceSetButtonImageRequest, ::StreamDeckAPI::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceSetButtonImageRequest, ::StreamDeckAPI::Response>* streamer) {
                       return this->StreamedSetDeviceButtonImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDeviceButtonImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeviceButtonImage(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonImageRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeviceButtonImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceSetButtonImageRequest,::StreamDeckAPI::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonLabelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonLabelResponse>* streamer) {
                       return this->StreamedGetDeviceButtonLabel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonLabelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceButtonLabel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceButtonRequest,::StreamDeckAPI::DeviceButtonLabelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeviceButtonLabel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeviceButtonLabel() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceSetButtonLabelRequest, ::StreamDeckAPI::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceSetButtonLabelRequest, ::StreamDeckAPI::Response>* streamer) {
                       return this->StreamedSetDeviceButtonLabel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDeviceButtonLabel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeviceButtonLabel(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeviceButtonLabel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceSetButtonLabelRequest,::StreamDeckAPI::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonComponentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonComponentResponse>* streamer) {
                       return this->StreamedGetDeviceButtonModuleComponent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceButtonRequest* /*request*/, ::StreamDeckAPI::DeviceButtonComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceButtonModuleComponent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceButtonRequest,::StreamDeckAPI::DeviceButtonComponentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeviceButtonModuleComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeviceButtonModuleComponent() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest, ::StreamDeckAPI::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest, ::StreamDeckAPI::Response>* streamer) {
                       return this->StreamedSetDeviceButtonModuleComponent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDeviceButtonModuleComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeviceButtonModuleComponent(::grpc::ServerContext* /*context*/, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* /*request*/, ::StreamDeckAPI::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeviceButtonModuleComponent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest,::StreamDeckAPI::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetComponents<WithStreamedUnaryMethod_GetDevices<WithStreamedUnaryMethod_SetDeviceBrightness<WithStreamedUnaryMethod_GetDeviceBrightness<WithStreamedUnaryMethod_GetDeviceProfiles<WithStreamedUnaryMethod_GetDeviceCurrentProfile<WithStreamedUnaryMethod_SetDeviceCurrentProfile<WithStreamedUnaryMethod_GetDevicePages<WithStreamedUnaryMethod_GetDeviceCurrentPage<WithStreamedUnaryMethod_SetDeviceCurrentPage<WithStreamedUnaryMethod_GetDeviceButtonImage<WithStreamedUnaryMethod_SetDeviceButtonImage<WithStreamedUnaryMethod_GetDeviceButtonLabel<WithStreamedUnaryMethod_SetDeviceButtonLabel<WithStreamedUnaryMethod_GetDeviceButtonModuleComponent<WithStreamedUnaryMethod_SetDeviceButtonModuleComponent<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetComponents<WithStreamedUnaryMethod_GetDevices<WithStreamedUnaryMethod_SetDeviceBrightness<WithStreamedUnaryMethod_GetDeviceBrightness<WithStreamedUnaryMethod_GetDeviceProfiles<WithStreamedUnaryMethod_GetDeviceCurrentProfile<WithStreamedUnaryMethod_SetDeviceCurrentProfile<WithStreamedUnaryMethod_GetDevicePages<WithStreamedUnaryMethod_GetDeviceCurrentPage<WithStreamedUnaryMethod_SetDeviceCurrentPage<WithStreamedUnaryMethod_GetDeviceButtonImage<WithStreamedUnaryMethod_SetDeviceButtonImage<WithStreamedUnaryMethod_GetDeviceButtonLabel<WithStreamedUnaryMethod_SetDeviceButtonLabel<WithStreamedUnaryMethod_GetDeviceButtonModuleComponent<WithStreamedUnaryMethod_SetDeviceButtonModuleComponent<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace StreamDeckAPI


#endif  // GRPC_api_2eproto__INCLUDED
