// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto

#include "api.pb.h"
#include "api.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace StreamDeckAPI {

static const char* StreamDeckAPI_method_names[] = {
  "/StreamDeckAPI.StreamDeckAPI/GetComponents",
  "/StreamDeckAPI.StreamDeckAPI/GetDevices",
  "/StreamDeckAPI.StreamDeckAPI/SetDeviceBrightness",
  "/StreamDeckAPI.StreamDeckAPI/GetDeviceBrightness",
  "/StreamDeckAPI.StreamDeckAPI/GetDeviceProfiles",
  "/StreamDeckAPI.StreamDeckAPI/GetDeviceCurrentProfile",
  "/StreamDeckAPI.StreamDeckAPI/SetDeviceCurrentProfile",
  "/StreamDeckAPI.StreamDeckAPI/GetDevicePages",
  "/StreamDeckAPI.StreamDeckAPI/GetDeviceCurrentPage",
  "/StreamDeckAPI.StreamDeckAPI/SetDeviceCurrentPage",
  "/StreamDeckAPI.StreamDeckAPI/GetDeviceButtonImage",
  "/StreamDeckAPI.StreamDeckAPI/SetDeviceButtonImage",
  "/StreamDeckAPI.StreamDeckAPI/GetDeviceButtonLabel",
  "/StreamDeckAPI.StreamDeckAPI/SetDeviceButtonLabel",
  "/StreamDeckAPI.StreamDeckAPI/GetDeviceButtonModuleComponent",
  "/StreamDeckAPI.StreamDeckAPI/SetDeviceButtonModuleComponent",
};

std::unique_ptr< StreamDeckAPI::Stub> StreamDeckAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamDeckAPI::Stub> stub(new StreamDeckAPI::Stub(channel, options));
  return stub;
}

StreamDeckAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetComponents_(StreamDeckAPI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevices_(StreamDeckAPI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDeviceBrightness_(StreamDeckAPI_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceBrightness_(StreamDeckAPI_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceProfiles_(StreamDeckAPI_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceCurrentProfile_(StreamDeckAPI_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDeviceCurrentProfile_(StreamDeckAPI_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevicePages_(StreamDeckAPI_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceCurrentPage_(StreamDeckAPI_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDeviceCurrentPage_(StreamDeckAPI_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceButtonImage_(StreamDeckAPI_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDeviceButtonImage_(StreamDeckAPI_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceButtonLabel_(StreamDeckAPI_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDeviceButtonLabel_(StreamDeckAPI_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceButtonModuleComponent_(StreamDeckAPI_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDeviceButtonModuleComponent_(StreamDeckAPI_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StreamDeckAPI::Stub::GetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::StreamDeckAPI::ModuleListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::StreamDeckAPI::ModuleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetComponents_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::ModuleListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::StreamDeckAPI::ModuleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetComponents_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetComponents(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::ModuleListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetComponents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::ModuleListResponse>* StreamDeckAPI::Stub::PrepareAsyncGetComponentsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::ModuleListResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetComponents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::ModuleListResponse>* StreamDeckAPI::Stub::AsyncGetComponentsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetComponentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::GetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::StreamDeckAPI::DeviceListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::StreamDeckAPI::DeviceListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevices_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::DeviceListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::StreamDeckAPI::DeviceListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevices_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetDevices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::DeviceListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceListResponse>* StreamDeckAPI::Stub::PrepareAsyncGetDevicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::DeviceListResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceListResponse>* StreamDeckAPI::Stub::AsyncGetDevicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDevicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::SetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::StreamDeckAPI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceSetBrightnessRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDeviceBrightness_, context, request, response);
}

void StreamDeckAPI::Stub::async::SetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceSetBrightnessRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceBrightness_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::SetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceBrightness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::PrepareAsyncSetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::Response, ::StreamDeckAPI::DeviceSetBrightnessRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDeviceBrightness_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::AsyncSetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDeviceBrightnessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::GetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceBrightnessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceBrightnessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceBrightness_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceBrightnessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceBrightnessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceBrightness_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetDeviceBrightness(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceBrightnessResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceBrightness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceBrightnessResponse>* StreamDeckAPI::Stub::PrepareAsyncGetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::DeviceBrightnessResponse, ::StreamDeckAPI::DeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceBrightness_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceBrightnessResponse>* StreamDeckAPI::Stub::AsyncGetDeviceBrightnessRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceBrightnessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::GetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceProfileListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceProfileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceProfiles_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceProfileListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceProfileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceProfiles_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetDeviceProfiles(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceProfileListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceProfiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceProfileListResponse>* StreamDeckAPI::Stub::PrepareAsyncGetDeviceProfilesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::DeviceProfileListResponse, ::StreamDeckAPI::DeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceProfiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceProfileListResponse>* StreamDeckAPI::Stub::AsyncGetDeviceProfilesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceProfilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::GetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceCurrentProfile_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceCurrentProfile_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceCurrentProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentProfileResponse>* StreamDeckAPI::Stub::PrepareAsyncGetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::DeviceCurrentProfileResponse, ::StreamDeckAPI::DeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceCurrentProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentProfileResponse>* StreamDeckAPI::Stub::AsyncGetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceCurrentProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::SetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::StreamDeckAPI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceSetProfileRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDeviceCurrentProfile_, context, request, response);
}

void StreamDeckAPI::Stub::async::SetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceSetProfileRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceCurrentProfile_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::SetDeviceCurrentProfile(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceCurrentProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::PrepareAsyncSetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::Response, ::StreamDeckAPI::DeviceSetProfileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDeviceCurrentProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::AsyncSetDeviceCurrentProfileRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDeviceCurrentProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::GetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DevicePageListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DevicePageListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevicePages_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DevicePageListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DevicePageListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevicePages_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetDevicePages(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DevicePageListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevicePages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DevicePageListResponse>* StreamDeckAPI::Stub::PrepareAsyncGetDevicePagesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::DevicePageListResponse, ::StreamDeckAPI::DeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevicePages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DevicePageListResponse>* StreamDeckAPI::Stub::AsyncGetDevicePagesRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDevicePagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::GetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::StreamDeckAPI::DeviceCurrentPageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentPageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceCurrentPage_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentPageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentPageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceCurrentPage_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentPageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceCurrentPage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentPageResponse>* StreamDeckAPI::Stub::PrepareAsyncGetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::DeviceCurrentPageResponse, ::StreamDeckAPI::DeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceCurrentPage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceCurrentPageResponse>* StreamDeckAPI::Stub::AsyncGetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceCurrentPageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::SetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::StreamDeckAPI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceSetPageRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDeviceCurrentPage_, context, request, response);
}

void StreamDeckAPI::Stub::async::SetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceSetPageRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceCurrentPage_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::SetDeviceCurrentPage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceCurrentPage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::PrepareAsyncSetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::Response, ::StreamDeckAPI::DeviceSetPageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDeviceCurrentPage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::AsyncSetDeviceCurrentPageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetPageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDeviceCurrentPageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::GetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::StreamDeckAPI::DeviceButtonImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceButtonImage_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceButtonImage_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceButtonImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonImageResponse>* StreamDeckAPI::Stub::PrepareAsyncGetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::DeviceButtonImageResponse, ::StreamDeckAPI::DeviceButtonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceButtonImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonImageResponse>* StreamDeckAPI::Stub::AsyncGetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceButtonImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::SetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::StreamDeckAPI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceSetButtonImageRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDeviceButtonImage_, context, request, response);
}

void StreamDeckAPI::Stub::async::SetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceSetButtonImageRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceButtonImage_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::SetDeviceButtonImage(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceButtonImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::PrepareAsyncSetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::Response, ::StreamDeckAPI::DeviceSetButtonImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDeviceButtonImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::AsyncSetDeviceButtonImageRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDeviceButtonImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::GetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::StreamDeckAPI::DeviceButtonLabelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonLabelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceButtonLabel_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonLabelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonLabelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceButtonLabel_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonLabelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceButtonLabel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonLabelResponse>* StreamDeckAPI::Stub::PrepareAsyncGetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::DeviceButtonLabelResponse, ::StreamDeckAPI::DeviceButtonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceButtonLabel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonLabelResponse>* StreamDeckAPI::Stub::AsyncGetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceButtonLabelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::SetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::StreamDeckAPI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceSetButtonLabelRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDeviceButtonLabel_, context, request, response);
}

void StreamDeckAPI::Stub::async::SetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceSetButtonLabelRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceButtonLabel_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::SetDeviceButtonLabel(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceButtonLabel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::PrepareAsyncSetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::Response, ::StreamDeckAPI::DeviceSetButtonLabelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDeviceButtonLabel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::AsyncSetDeviceButtonLabelRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDeviceButtonLabelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::GetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::StreamDeckAPI::DeviceButtonComponentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonComponentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceButtonModuleComponent_, context, request, response);
}

void StreamDeckAPI::Stub::async::GetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonComponentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonComponentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceButtonModuleComponent_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::GetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceButtonModuleComponent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonComponentResponse>* StreamDeckAPI::Stub::PrepareAsyncGetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::DeviceButtonComponentResponse, ::StreamDeckAPI::DeviceButtonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceButtonModuleComponent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::DeviceButtonComponentResponse>* StreamDeckAPI::Stub::AsyncGetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceButtonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceButtonModuleComponentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StreamDeckAPI::Stub::SetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::StreamDeckAPI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDeviceButtonModuleComponent_, context, request, response);
}

void StreamDeckAPI::Stub::async::SetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::StreamDeckAPI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceButtonModuleComponent_, context, request, response, std::move(f));
}

void StreamDeckAPI::Stub::async::SetDeviceButtonModuleComponent(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::StreamDeckAPI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceButtonModuleComponent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::PrepareAsyncSetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StreamDeckAPI::Response, ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDeviceButtonModuleComponent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StreamDeckAPI::Response>* StreamDeckAPI::Stub::AsyncSetDeviceButtonModuleComponentRaw(::grpc::ClientContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDeviceButtonModuleComponentRaw(context, request, cq);
  result->StartCall();
  return result;
}

StreamDeckAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::google::protobuf::Empty, ::StreamDeckAPI::ModuleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::StreamDeckAPI::ModuleListResponse* resp) {
               return service->GetComponents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::google::protobuf::Empty, ::StreamDeckAPI::DeviceListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::StreamDeckAPI::DeviceListResponse* resp) {
               return service->GetDevices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceSetBrightnessRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceSetBrightnessRequest* req,
             ::StreamDeckAPI::Response* resp) {
               return service->SetDeviceBrightness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceBrightnessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceRequest* req,
             ::StreamDeckAPI::DeviceBrightnessResponse* resp) {
               return service->GetDeviceBrightness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceProfileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceRequest* req,
             ::StreamDeckAPI::DeviceProfileListResponse* resp) {
               return service->GetDeviceProfiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceRequest* req,
             ::StreamDeckAPI::DeviceCurrentProfileResponse* resp) {
               return service->GetDeviceCurrentProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceSetProfileRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceSetProfileRequest* req,
             ::StreamDeckAPI::Response* resp) {
               return service->SetDeviceCurrentProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DevicePageListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceRequest* req,
             ::StreamDeckAPI::DevicePageListResponse* resp) {
               return service->GetDevicePages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceRequest, ::StreamDeckAPI::DeviceCurrentPageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceRequest* req,
             ::StreamDeckAPI::DeviceCurrentPageResponse* resp) {
               return service->GetDeviceCurrentPage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceSetPageRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceSetPageRequest* req,
             ::StreamDeckAPI::Response* resp) {
               return service->SetDeviceCurrentPage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceButtonRequest* req,
             ::StreamDeckAPI::DeviceButtonImageResponse* resp) {
               return service->GetDeviceButtonImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceSetButtonImageRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceSetButtonImageRequest* req,
             ::StreamDeckAPI::Response* resp) {
               return service->SetDeviceButtonImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonLabelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceButtonRequest* req,
             ::StreamDeckAPI::DeviceButtonLabelResponse* resp) {
               return service->GetDeviceButtonLabel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceSetButtonLabelRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceSetButtonLabelRequest* req,
             ::StreamDeckAPI::Response* resp) {
               return service->SetDeviceButtonLabel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceButtonRequest, ::StreamDeckAPI::DeviceButtonComponentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceButtonRequest* req,
             ::StreamDeckAPI::DeviceButtonComponentResponse* resp) {
               return service->GetDeviceButtonModuleComponent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDeckAPI_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamDeckAPI::Service, ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest, ::StreamDeckAPI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StreamDeckAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* req,
             ::StreamDeckAPI::Response* resp) {
               return service->SetDeviceButtonModuleComponent(ctx, req, resp);
             }, this)));
}

StreamDeckAPI::Service::~Service() {
}

::grpc::Status StreamDeckAPI::Service::GetComponents(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::ModuleListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::GetDevices(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::StreamDeckAPI::DeviceListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::SetDeviceBrightness(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetBrightnessRequest* request, ::StreamDeckAPI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::GetDeviceBrightness(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceBrightnessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::GetDeviceProfiles(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceProfileListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::GetDeviceCurrentProfile(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentProfileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::SetDeviceCurrentProfile(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetProfileRequest* request, ::StreamDeckAPI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::GetDevicePages(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DevicePageListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::GetDeviceCurrentPage(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceRequest* request, ::StreamDeckAPI::DeviceCurrentPageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::SetDeviceCurrentPage(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetPageRequest* request, ::StreamDeckAPI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::GetDeviceButtonImage(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::SetDeviceButtonImage(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetButtonImageRequest* request, ::StreamDeckAPI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::GetDeviceButtonLabel(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonLabelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::SetDeviceButtonLabel(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetButtonLabelRequest* request, ::StreamDeckAPI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::GetDeviceButtonModuleComponent(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceButtonRequest* request, ::StreamDeckAPI::DeviceButtonComponentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamDeckAPI::Service::SetDeviceButtonModuleComponent(::grpc::ServerContext* context, const ::StreamDeckAPI::DeviceSetButtonModuleComponentRequest* request, ::StreamDeckAPI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace StreamDeckAPI

